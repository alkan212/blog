{"current_files": {"oui.jsx": {"filename": "oui.jsx", "relpath": "src/pages/oui.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/oui.jsx", "data": "aW1wb3J0IEhlYWQgZnJvbSAnbmV4dC9oZWFkJwppbXBvcnQgTGluayBmcm9tICduZXh0L2xpbmsnCgppbXBvcnQgeyBBdXRoTGF5b3V0IH0gZnJvbSAnQC9jb21wb25lbnRzL0F1dGhMYXlvdXQnCmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gJ0AvY29tcG9uZW50cy9CdXR0b24nCmltcG9ydCB7IFRleHRGaWVsZCB9IGZyb20gJ0AvY29tcG9uZW50cy9GaWVsZHMnCmltcG9ydCB7IExvZ28gfSBmcm9tICdAL2NvbXBvbmVudHMvTG9nbycKCmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIExvZ2luKCkgewogIHJldHVybiAoCiAgICA8PgogICAgICA8aDE+b3VpPC9oMT4KICAgIDwvPgogICkKfQo="}, "_app.jsx": {"filename": "_app.jsx", "relpath": "src/pages/_app.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/_app.jsx", "data": "aW1wb3J0ICdmb2N1cy12aXNpYmxlJwppbXBvcnQgJ0Avc3R5bGVzL3RhaWx3aW5kLmNzcycKCmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEFwcCh7IENvbXBvbmVudCwgcGFnZVByb3BzIH0pIHsKICByZXR1cm4gPENvbXBvbmVudCB7Li4ucGFnZVByb3BzfSAvPgp9Cg=="}, "index.jsx": {"filename": "index.jsx", "relpath": "src/pages/index.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/index.jsx", "data": "aW1wb3J0IEhlYWQgZnJvbSAnbmV4dC9oZWFkJwoKaW1wb3J0IHsgQ2FsbFRvQWN0aW9uIH0gZnJvbSAnQC9jb21wb25lbnRzL0NhbGxUb0FjdGlvbicKaW1wb3J0IHsgRmFxcyB9IGZyb20gJ0AvY29tcG9uZW50cy9GYXFzJwppbXBvcnQgeyBGb290ZXIgfSBmcm9tICdAL2NvbXBvbmVudHMvRm9vdGVyJwppbXBvcnQgeyBIZWFkZXIgfSBmcm9tICdAL2NvbXBvbmVudHMvSGVhZGVyJwppbXBvcnQgeyBCbG9nIH0gZnJvbSAnQC9jb21wb25lbnRzL0Jsb2cnCmltcG9ydCB7IFVzZXJIZWFkZXIgfSBmcm9tICdAL2NvbXBvbmVudHMvVXNlckhlYWRlcicKCmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEhvbWUoKSB7CiAgcmV0dXJuICgKICAgIDw+CiAgICAgIDxIZWFkPgogICAgICAgIDx0aXRsZT5UYXhQYWwgLSBBY2NvdW50aW5nIG1hZGUgc2ltcGxlIGZvciBzbWFsbCBidXNpbmVzc2VzPC90aXRsZT4KICAgICAgICA8bWV0YQogICAgICAgICAgbmFtZT0iZGVzY3JpcHRpb24iCiAgICAgICAgICBjb250ZW50PSJNb3N0IGJvb2trZWVwaW5nIHNvZnR3YXJlIGlzIGFjY3VyYXRlLCBidXQgaGFyZCB0byB1c2UuIFdlIG1ha2UgdGhlIG9wcG9zaXRlIHRyYWRlLW9mZiwgYW5kIGhvcGUgeW91IGRvbuKAmXQgZ2V0IGF1ZGl0ZWQuIgogICAgICAgIC8+CiAgICAgIDwvSGVhZD4KICAgICAgPEhlYWRlciAvPgogICAgICA8bWFpbj4KICAgICAgICA8QmxvZyAvPgogICAgICA8L21haW4+CiAgICAgIDxGb290ZXIgLz4KICAgIDwvPgogICkKfQo="}, "register.jsx": {"filename": "register.jsx", "relpath": "src/pages/register.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/register.jsx", "data": "aW1wb3J0IEhlYWQgZnJvbSAnbmV4dC9oZWFkJwppbXBvcnQgTGluayBmcm9tICduZXh0L2xpbmsnCgppbXBvcnQgeyBBdXRoTGF5b3V0IH0gZnJvbSAnQC9jb21wb25lbnRzL0F1dGhMYXlvdXQnCmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gJ0AvY29tcG9uZW50cy9CdXR0b24nCmltcG9ydCB7IFNlbGVjdEZpZWxkLCBUZXh0RmllbGQgfSBmcm9tICdAL2NvbXBvbmVudHMvRmllbGRzJwppbXBvcnQgeyBMb2dvIH0gZnJvbSAnQC9jb21wb25lbnRzL0xvZ28nCgpleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBSZWdpc3RlcigpIHsKICByZXR1cm4gKAogICAgPD4KICAgICAgPEhlYWQ+CiAgICAgICAgPHRpdGxlPlNpZ24gVXAgLSBUYXhQYWw8L3RpdGxlPgogICAgICA8L0hlYWQ+CiAgICAgIDxBdXRoTGF5b3V0PgogICAgICAgIDxkaXYgY2xhc3NOYW1lPSJmbGV4IGZsZXgtY29sIj4KICAgICAgICAgIDxMaW5rIGhyZWY9Ii8iIGFyaWEtbGFiZWw9IkhvbWUiPgogICAgICAgICAgICA8TG9nbyBjbGFzc05hbWU9ImgtMTAgdy1hdXRvIiAvPgogICAgICAgICAgPC9MaW5rPgogICAgICAgICAgPGRpdiBjbGFzc05hbWU9Im10LTIwIj4KICAgICAgICAgICAgPGgyIGNsYXNzTmFtZT0idGV4dC1sZyBmb250LXNlbWlib2xkIHRleHQtZ3JheS05MDAiPgogICAgICAgICAgICAgIEdldCBzdGFydGVkIGZvciBmcmVlCiAgICAgICAgICAgIDwvaDI+CiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT0ibXQtMiB0ZXh0LXNtIHRleHQtZ3JheS03MDAiPgogICAgICAgICAgICAgIEFscmVhZHkgcmVnaXN0ZXJlZD97JyAnfQogICAgICAgICAgICAgIDxMaW5rCiAgICAgICAgICAgICAgICBocmVmPSIvbG9naW4iCiAgICAgICAgICAgICAgICBjbGFzc05hbWU9ImZvbnQtbWVkaXVtIHRleHQtYmx1ZS02MDAgaG92ZXI6dW5kZXJsaW5lIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIFNpZ24gaW4KICAgICAgICAgICAgICA8L0xpbms+eycgJ30KICAgICAgICAgICAgICB0byB5b3VyIGFjY291bnQuCiAgICAgICAgICAgIDwvcD4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxmb3JtCiAgICAgICAgICBhY3Rpb249IiMiCiAgICAgICAgICBjbGFzc05hbWU9Im10LTEwIGdyaWQgZ3JpZC1jb2xzLTEgZ2FwLXktOCBnYXAteC02IHNtOmdyaWQtY29scy0yIgogICAgICAgID4KICAgICAgICAgIDxUZXh0RmllbGQKICAgICAgICAgICAgbGFiZWw9IkZpcnN0IG5hbWUiCiAgICAgICAgICAgIGlkPSJmaXJzdF9uYW1lIgogICAgICAgICAgICBuYW1lPSJmaXJzdF9uYW1lIgogICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICBhdXRvQ29tcGxldGU9ImdpdmVuLW5hbWUiCiAgICAgICAgICAgIHJlcXVpcmVkCiAgICAgICAgICAvPgogICAgICAgICAgPFRleHRGaWVsZAogICAgICAgICAgICBsYWJlbD0iTGFzdCBuYW1lIgogICAgICAgICAgICBpZD0ibGFzdF9uYW1lIgogICAgICAgICAgICBuYW1lPSJsYXN0X25hbWUiCiAgICAgICAgICAgIHR5cGU9InRleHQiCiAgICAgICAgICAgIGF1dG9Db21wbGV0ZT0iZmFtaWx5LW5hbWUiCiAgICAgICAgICAgIHJlcXVpcmVkCiAgICAgICAgICAvPgogICAgICAgICAgPFRleHRGaWVsZAogICAgICAgICAgICBjbGFzc05hbWU9ImNvbC1zcGFuLWZ1bGwiCiAgICAgICAgICAgIGxhYmVsPSJFbWFpbCBhZGRyZXNzIgogICAgICAgICAgICBpZD0iZW1haWwiCiAgICAgICAgICAgIG5hbWU9ImVtYWlsIgogICAgICAgICAgICB0eXBlPSJlbWFpbCIKICAgICAgICAgICAgYXV0b0NvbXBsZXRlPSJlbWFpbCIKICAgICAgICAgICAgcmVxdWlyZWQKICAgICAgICAgIC8+CiAgICAgICAgICA8VGV4dEZpZWxkCiAgICAgICAgICAgIGNsYXNzTmFtZT0iY29sLXNwYW4tZnVsbCIKICAgICAgICAgICAgbGFiZWw9IlBhc3N3b3JkIgogICAgICAgICAgICBpZD0icGFzc3dvcmQiCiAgICAgICAgICAgIG5hbWU9InBhc3N3b3JkIgogICAgICAgICAgICB0eXBlPSJwYXNzd29yZCIKICAgICAgICAgICAgYXV0b0NvbXBsZXRlPSJuZXctcGFzc3dvcmQiCiAgICAgICAgICAgIHJlcXVpcmVkCiAgICAgICAgICAvPgogICAgICAgICAgPFNlbGVjdEZpZWxkCiAgICAgICAgICAgIGNsYXNzTmFtZT0iY29sLXNwYW4tZnVsbCIKICAgICAgICAgICAgbGFiZWw9IkhvdyBkaWQgeW91IGhlYXIgYWJvdXQgdXM/IgogICAgICAgICAgICBpZD0icmVmZXJyYWxfc291cmNlIgogICAgICAgICAgICBuYW1lPSJyZWZlcnJhbF9zb3VyY2UiCiAgICAgICAgICA+CiAgICAgICAgICAgIDxvcHRpb24+QWx0YVZpc3RhIHNlYXJjaDwvb3B0aW9uPgogICAgICAgICAgICA8b3B0aW9uPlN1cGVyIEJvd2wgY29tbWVyY2lhbDwvb3B0aW9uPgogICAgICAgICAgICA8b3B0aW9uPk91ciByb3V0ZSAzNCBjaXR5IGJ1cyBhZDwvb3B0aW9uPgogICAgICAgICAgICA8b3B0aW9uPlRoZSDigJxOZXZlciBVc2UgVGhpc+KAnSBwb2RjYXN0PC9vcHRpb24+CiAgICAgICAgICA8L1NlbGVjdEZpZWxkPgogICAgICAgICAgPGRpdiBjbGFzc05hbWU9ImNvbC1zcGFuLWZ1bGwiPgogICAgICAgICAgICA8QnV0dG9uCiAgICAgICAgICAgICAgdHlwZT0ic3VibWl0IgogICAgICAgICAgICAgIHZhcmlhbnQ9InNvbGlkIgogICAgICAgICAgICAgIGNvbG9yPSJibHVlIgogICAgICAgICAgICAgIGNsYXNzTmFtZT0idy1mdWxsIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPHNwYW4+CiAgICAgICAgICAgICAgICBTaWduIHVwIDxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj4mcmFycjs8L3NwYW4+CiAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICA8L0J1dHRvbj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZm9ybT4KICAgICAgPC9BdXRoTGF5b3V0PgogICAgPC8+CiAgKQp9Cg=="}, "_document.jsx": {"filename": "_document.jsx", "relpath": "src/pages/_document.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/_document.jsx", "data": "aW1wb3J0IHsgSGVhZCwgSHRtbCwgTWFpbiwgTmV4dFNjcmlwdCB9IGZyb20gJ25leHQvZG9jdW1lbnQnCgpleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBEb2N1bWVudChwcm9wcykgewogIGxldCBwYWdlUHJvcHMgPSBwcm9wcy5fX05FWFRfREFUQV9fPy5wcm9wcz8ucGFnZVByb3BzCgogIHJldHVybiAoCiAgICA8SHRtbAogICAgICBjbGFzc05hbWU9ImgtZnVsbCBzY3JvbGwtc21vb3RoIGJnLXdoaXRlIGFudGlhbGlhc2VkIFtmb250LWZlYXR1cmUtc2V0dGluZ3M6J3NzMDEnXSIKICAgICAgbGFuZz0iZW4iCiAgICA+CiAgICAgIDxIZWFkPgogICAgICAgIDxsaW5rIHJlbD0icHJlY29ubmVjdCIgaHJlZj0iaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbSIgLz4KICAgICAgICA8bGluawogICAgICAgICAgcmVsPSJwcmVjb25uZWN0IgogICAgICAgICAgaHJlZj0iaHR0cHM6Ly9mb250cy5nc3RhdGljLmNvbSIKICAgICAgICAgIGNyb3NzT3JpZ2luPSJhbm9ueW1vdXMiCiAgICAgICAgLz4KICAgICAgICA8bGluawogICAgICAgICAgcmVsPSJzdHlsZXNoZWV0IgogICAgICAgICAgaHJlZj0iaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1JbnRlcjp3Z2h0QDEwMC4uOTAwJmZhbWlseT1MZXhlbmQ6d2dodEA0MDA7NTAwJmRpc3BsYXk9c3dhcCIKICAgICAgICAvPgogICAgICA8L0hlYWQ+CiAgICAgIDxib2R5IGNsYXNzTmFtZT0iZmxleCBoLWZ1bGwgZmxleC1jb2wiPgogICAgICAgIDxNYWluIC8+CiAgICAgICAgPE5leHRTY3JpcHQgLz4KICAgICAgPC9ib2R5PgogICAgPC9IdG1sPgogICkKfQo="}, "giftforkids.jsx": {"filename": "giftforkids.jsx", "relpath": "src/pages/template/top/giftforkids.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/top/giftforkids.jsx", "data": ""}, "giftforpianist.jsx": {"filename": "giftforpianist.jsx", "relpath": "src/pages/template/top/giftforpianist.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/top/giftforpianist.jsx", "data": ""}, "GiftsfortheBookworm.jsx": {"filename": "GiftsfortheBookworm.jsx", "relpath": "src/pages/template/top/GiftsfortheBookworm.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/top/GiftsfortheBookworm.jsx", "data": "Ly8gYSBjaGFuZ2VyICEKY29uc3QgdGl0cmVPbmdsZXQgPSAiIDUgZ2lmdHMgZm9yIHRoZSBib29rd29ybXMiCmNvbnN0IGRlc2NyaXB0aW9uID0gIklmIHlvdSBoYXZlIGEgdGVjaC1zYXZ2eSBsb3ZlZCBvbmUgaW4geW91ciBsaWZlLCBmaW5kaW5nIHRoZSBwZXJmZWN0IGdpZnQgY2FuIGJlIGEgY2hhbGxlbmdlLiBUaGV5IHByb2JhYmx5IGhhdmUgdGhlIGxhdGVzdCBnYWRnZXRzIGFuZCBkZXZpY2VzLCBhbmQgaXQgY2FuIGJlIHRvdWdoIHRvIGZpbmQgc29tZXRoaW5nIHRoYXQgd2lsbCB0cnVseSBzdXJwcmlzZSBhbmQgZGVsaWdodCB0aGVtLiBCdXQgZmVhciBub3QhIFdlJ3ZlIGNvbXBpbGVkIGEgbGlzdCBvZiBnaWZ0IGlkZWFzIHRoYXQgYXJlIHN1cmUgdG8gcGxlYXNlIGV2ZW4gdGhlIG1vc3QgZGlzY2VybmluZyB0ZWNobm9sb2d5IGxvdmVyLiAiCgpjb25zdCBzdWpldCA9ICJnaWZ0cyIKY29uc3QgdGl0cmUgPSAiNSBnaWZ0cyBmb3IgdGhlIGJvb2t3b3JtcyIKCgoKaW1wb3J0IHsgSW1nIH0gZnJvbSAnQC9jb21wb25lbnRzL2Jsb2cvSW1nJwppbXBvcnQgeyBJbWFnZXNHcmlkIH0gZnJvbSAnQC9jb21wb25lbnRzL2Jsb2cvSW1hZ2VzR3JpZCcKaW1wb3J0IEhlYWQgZnJvbSAnbmV4dC9oZWFkJwppbXBvcnQgeyBOZXdzbGV0dGVyIH0gZnJvbSAnQC9jb21wb25lbnRzL05ld3NsZXR0ZXInCmltcG9ydCB7IExvZ28gfSBmcm9tICdAL2ltYWdlcy9sb2dvLnN2ZycKaW1wb3J0IHsgRm9vdGVyIH0gZnJvbSAnQC9jb21wb25lbnRzL0Zvb3RlcicKaW1wb3J0IHsgSGVhZGVyIH0gZnJvbSAnQC9jb21wb25lbnRzL0hlYWRlcicKaW1wb3J0IHsgQmxvZyB9IGZyb20gJ0AvY29tcG9uZW50cy9CbG9nJwppbXBvcnQgeyBUb3AgfSBmcm9tICdAL2NvbXBvbmVudHMvYmxvZy9Ub3AnCmltcG9ydCB7IFRvcFRpdHJlIH0gZnJvbSAnQC9jb21wb25lbnRzL2Jsb2cvVG9wVGl0cmUnCmltcG9ydCB7IExpc3QgfSBmcm9tICdAL2NvbXBvbmVudHMvYmxvZy9MaXN0JwoKaW1wb3J0IHsgVXNlckhlYWRlciB9IGZyb20gJ0AvY29tcG9uZW50cy9Vc2VySGVhZGVyJwoKCmltcG9ydCB7IEludHJvZHVjdGlvblRleHQgfSBmcm9tICdAL2NvbXBvbmVudHMvYmxvZy9JbnRyb2R1Y3Rpb25UZXh0JwppbXBvcnQgeyBTdWpldCB9IGZyb20gJ0AvY29tcG9uZW50cy9ibG9nL1N1amV0JwppbXBvcnQgeyBUaXRyZSB9IGZyb20gJ0AvY29tcG9uZW50cy9ibG9nL1RpdHJlJwoKY29uc3QgY29sb3IgPSAidGV4dC1pbmRpZ28tNjAwIgoKCmZ1bmN0aW9uIEludHJvZHVjdGlvbigpewogIHJldHVybiAoCiAgICA8PgogICAgICA8ZGl2IGNsYXNzTmFtZT0ibXgtYXV0byBtYXgtdy1wcm9zZSB0ZXh0LWxnIGZsZXggZmxleC1jb2wgaXRlbXMtY2VudGVyIj4KICAgICAgICA8VXNlckhlYWRlciAvPgogICAgICAgIAogICAgICAgIDxTdWpldCBjbGFzc05hbWU9e2NvbG9yfT57c3VqZXR9PC9TdWpldD4KICAgICAgICA8VGl0cmU+e3RpdHJlfTwvVGl0cmU+CiAgICAgIAogICAgICAgIDxJbnRyb2R1Y3Rpb25UZXh0PkdpZnRzIGZvciBib29rd29ybXMgYXJlIGFsd2F5cyBhIGdyZWF0IGlkZWEgYmVjYXVzZSB0aGV5IHNob3cgdGhhdCB5b3UgY2FyZSBhYm91dCB0aGVpciBpbnRlcmVzdHMgYW5kIGhvYmJpZXMuIEJvb2t3b3JtcyBhcmUgcGVvcGxlIHdobyBsb3ZlIHRvIHJlYWQgYW5kIGFyZSBvZnRlbiBwYXNzaW9uYXRlIGFib3V0IGxpdGVyYXR1cmUsIHNvIGl0J3MgaW1wb3J0YW50IHRvIGNob29zZSBnaWZ0cyB0aGF0IHJlZmxlY3QgdGhlaXIgbG92ZSBvZiBib29rcy4gSGVyZSBhcmUgYSBmZXcgaWRlYXMgZm9yIGdpZnRzIHRoYXQgYm9va3dvcm1zIHdpbGwgbG92ZS48L0ludHJvZHVjdGlvblRleHQ+CiAgICAgIDwvZGl2PgogICAgPC8+CiAgKQp9CgpmdW5jdGlvbiBDb250ZW51KCl7CiAgcmV0dXJuICgKICAgIDw+CiAgICAgICAgICA8VG9wIGNsYXNzTmFtZT0ibXQtMTAiPgogICAgICAgIDxkaXYgY2xhc3NOYW1lPSd3LWZ1bGwgaC1mdWxsIGZsZXgganVzdGlmeS1iZXR3ZWVuIGl0ZW1zLWNlbnRlcic+CiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncHItMTAnPgogICAgICAgICAgPFRvcFRpdHJlPjEuYm9va3M8L1RvcFRpdHJlPgoKICAgICAgICAgIDxwPgogICAgICAgICAgVGhpcyBtYXkgc2VlbSBvYnZpb3VzLCBidXQgYm9va3dvcm1zIGNhbiBuZXZlciBoYXZlIHRvbyBtYW55IGJvb2tzISBDb25zaWRlciBnZXR0aW5nIHRoZW0gYSBuZXcgcmVsZWFzZSBvciBhIGNsYXNzaWMgdGhhdCB0aGV5J3ZlIGFsd2F5cyB3YW50ZWQgdG8gcmVhZC57JyAnfQogICAgICAgIAogICAgICAgICAgPC9wPgogICAgICAgICAgPC9kaXY+CgogICAgICAgICAgPEltYWdlc0dyaWQgY29sPXsxfSByb3c9ezF9IHNpemU9ezUwfT4KICAgICAgICAgICAgPEltZyB0ZXh0PXsiSGFycnkgUG90dGVyIn0gc3JjPXsiaHR0cHM6Ly9tLm1lZGlhLWFtYXpvbi5jb20vaW1hZ2VzL0kvNzFyT3p5NGN5QUwuanBnIn0gaHJlZj17Imh0dHBzOi8vYW16bi50by8zRzNwbEV1In0gLz4KICAgICAgICAgIDwvSW1hZ2VzR3JpZD4KICAgICAgICAgIDwvZGl2PgogICAgICA8L1RvcD4KCiAgICAgIDxUb3A+CiAgICAgICAgICA8VG9wVGl0cmU+Mi5Cb29rbWFya3M8L1RvcFRpdHJlPgoKICAgICAgICAgIDxwPgogICAgICAgICAgQm9va21hcmtzIGFyZSBhIHByYWN0aWNhbCBhbmQgdGhvdWdodGZ1bCBnaWZ0IGZvciBib29rd29ybXMuIENvbnNpZGVyIGdldHRpbmcgdGhlbSBhIGJvb2ttYXJrIHdpdGggYSBxdW90ZSBmcm9tIHRoZWlyIGZhdm9yaXRlIGJvb2sgb3IgYSBib29rbWFyayB3aXRoIGEgZGVzaWduIHRoYXQgcmVmbGVjdHMgdGhlaXIgaW50ZXJlc3RzLgogICAgICAgICAgPC9wPgogICAgICAgICAgPEltYWdlc0dyaWQgY29sPXsyfSByb3c9ezF9IGdhcD17NH0+CiAgICAgICAgICAgIDxJbWcgdGV4dD17IkhlZHdpZyBCb29rbWFyayJ9IHNyYz17Imh0dHBzOi8vbS5tZWRpYS1hbWF6b24uY29tL2ltYWdlcy9JLzgxeXFpNHlFQ21MLl9BQ19TTDE1MDBfLmpwZyJ9IGhyZWY9eyJodHRwczovL2Ftem4udG8vM3VYRTZUNSJ9IC8+CiAgICAgICAgICAgIDxJbWcgdGV4dD17IlRvaXJ4YXJuIE1ldGFsIEZlYXRoZXIgQm9va21ha3IifSBzcmM9eyJodHRwczovL20ubWVkaWEtYW1hem9uLmNvbS9pbWFnZXMvSS83MVgwQkVZQWt4TC5fQUNfU0wxNTAwXy5qcGcifSBocmVmPXsiaHR0cHM6Ly9hbXpuLnRvLzNXOXVpUlUifSAvPgogICAgICAgICAgPC9JbWFnZXNHcmlkPgogICAgICA8L1RvcD4KCiAgICAgIDxUb3A+CiAgICAgICAgICA8VG9wVGl0cmU+My5SZWFkaW5nIGxpZ2h0czwvVG9wVGl0cmU+CiAgICAgICAgICA8cD4KICAgICAgICAgIFJlYWRpbmcgbGlnaHRzIGFyZSBhIGdyZWF0IGdpZnQgZm9yIGJvb2t3b3JtcyBiZWNhdXNlIHRoZXkgYWxsb3cgdGhlbSB0byByZWFkIGxhdGUgaW50byB0aGUgbmlnaHQgd2l0aG91dCBkaXN0dXJiaW5nIG90aGVycy4gVGhlcmUgYXJlIG1hbnkgZGlmZmVyZW50IHN0eWxlcyBvZiByZWFkaW5nIGxpZ2h0cyBhdmFpbGFibGUsIHNvIHlvdSBjYW4gY2hvb3NlIG9uZSB0aGF0IGZpdHMgdGhlaXIgcGVyc29uYWxpdHkgYW5kIGRlY29yLgogICAgICAgICAgPC9wPgogICAgICAgICAgPEltYWdlc0dyaWQgY29sPXsyfSByb3c9ezF9IGdhcD17NH0+CiAgICAgICAgICAgIDxJbWcgdGV4dD17IlRFQU1QRCJ9IHNyYz17Imh0dHBzOi8vbS5tZWRpYS1hbWF6b24uY29tL2ltYWdlcy9JLzYxVkpkNjdYYStMLl9BQ19TTDE1MDBfLmpwZyJ9IGhyZWY9eyJodHRwczovL2Ftem4udG8vM0ZEblp5UCJ9IC8+CiAgICAgICAgICAgIDxJbWcgdGV4dD17Ikx1eGpldCJ9IHNyYz17Imh0dHBzOi8vbS5tZWRpYS1hbWF6b24uY29tL2ltYWdlcy9JLzYxV1F2aHZrTHNMLl9BQ19TTDE1MDBfLmpwZyJ9IGhyZWY9eyJodHRwczovL2Ftem4udG8vM0JIQU1QTyJ9IC8+CiAgICAgICAgICA8L0ltYWdlc0dyaWQ+CiAgICAgIDwvVG9wPgogICAgICA8VG9wPgogICAgICAgICAgPFRvcFRpdHJlPjQuRS1yZWFkZXI8L1RvcFRpdHJlPgogICAgICAgICAgPHA+CiAgICAgICAgICAgZS1yZWFkZXIgY2FuIGJlIGEgZ3JlYXQgZ2lmdCBmb3Igc29tZW9uZSB3aG8gbG92ZXMgdG8gcmVhZCBhbmQgd2FudHMgYSBjb252ZW5pZW50IHdheSB0byBhY2Nlc3MgdGhlaXIgZmF2b3JpdGUgYm9va3MuCiAgICAgICAgICA8L3A+CiAgICAgICAgICA8YSBocmVmPSJodHRwczovL2Ftem4udG8vM1B6eE55eSI+CiAgICAgICAgICAgIDxpbWcgd2lkdGg9ezQwMH0KICAgICAgICAgICAgc3JjPSJodHRwczovL20ubWVkaWEtYW1hem9uLmNvbS9pbWFnZXMvSS82MUl2RXcxS0wrTC5fQUNfU0wxMDAxXy5qcGciPgogICAgICAgICAgICA8L2ltZz4KICAgICAgICAgIDwvYT4KICAgICAgICAgIDxhIGhyZWY9J2h0dHBzOi8vYW16bi50by8zUHp4Tnl5Jz5BbGwtbmV3IEtpbmRsZTwvYT4KICAgICAgPC9Ub3A+CiAgICAgIDxUb3A+CiAgICAgICAgICA8VG9wVGl0cmU+NS5Cb29rLXRoZW1lZCBnaWZ0czwvVG9wVGl0cmU+CiAgICAgICAgICA8cD4KICAgICAgICAgIEJvb2t3b3JtcyB3aWxsIGxvdmUgZ2lmdHMgdGhhdCBzaG93IG9mZiB0aGVpciBsb3ZlIG9mIGxpdGVyYXR1cmUuIENvbnNpZGVyIGdldHRpbmcgdGhlbSBhIGJvb2stdGhlbWVkIG11ZywgdC1zaGlydCwgb3IgcGllY2Ugb2YgamV3ZWxyeS4KICAgICAgICAgIDwvcD4KICAgICAgICAgIDxJbWFnZXNHcmlkIGNvbD17Mn0gcm93PXsxfSBnYXA9ezR9PgogICAgICAgICAgICA8SW1nIHRleHQ9eyJUTUlTSElPTiBKZXdlbGxlcnkifSBzcmM9eyJodHRwczovL20ubWVkaWEtYW1hem9uLmNvbS9pbWFnZXMvSS82MUdZMUE2ZmRLTC5fQUNfU0wxMDAxXy5qcGcifSBocmVmPXsiaHR0cHM6Ly9hbXpuLnRvLzNoQzZXOGcifSAvPgogICAgICAgICAgICA8SW1nIHRleHQ9eyJNaW5pYmxpbmdzIFNpbHZlciBCb29rIn0gc3JjPXsiaHR0cHM6Ly9tLm1lZGlhLWFtYXpvbi5jb20vaW1hZ2VzL0kvNjFkckhpS09qWEwuX0FDX1NYNjc5Xy5qcGcifSBocmVmPXsiaHR0cHM6Ly9hbXpuLnRvLzNXZjdDek8ifSAvPgogICAgICAgICAgPC9JbWFnZXNHcmlkPgogICAgICA8L1RvcD4KICAgIDwvPgogICkKfQoKZnVuY3Rpb24gQ29uY2x1c2lvbigpewogIHJldHVybiAoCiAgICA8PgoKICAgICAgICA8aDI+Q29uY2x1c2lvbjwvaDI+CiAgICAgICAgPHA+CgogICAgICAgIFJlbWVtYmVyLCB0aGUga2V5IHRvIGNob29zaW5nIGEgZ3JlYXQgZ2lmdCBmb3IgYSBib29rd29ybSBpcyB0byB0aGluayBhYm91dCB0aGVpciBpbnRlcmVzdHMgYW5kIHBhc3Npb25zLiBXaXRoIGEgbGl0dGxlIGJpdCBvZiB0aG91Z2h0LCB5b3UgY2FuIGZpbmQgYSBnaWZ0IHRoYXQgdGhleSB3aWxsIHRydWx5IGFwcHJlY2lhdGUgYW5kIGVuam95LgogICAgICAgIDwvcD4KCiAgICA8Lz4KICApCn0KCgoKCgpleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBIb21lKCkgewogIHJldHVybiAoCiAgICA8PgogICAgICA8SGVhZD4KICAgICAgICA8dGl0bGU+e3RpdHJlT25nbGV0fTwvdGl0bGU+CiAgICAgICAgPG1ldGEKICAgICAgICAgIG5hbWU9ImRlc2NyaXB0aW9uIgogICAgICAgICAgY29udGVudD17ZGVzY3JpcHRpb259CiAgICAgICAgLz4KICAgICAgPC9IZWFkPgogICAgICA8SGVhZGVyIC8+CiAgICAgIDxtYWluPgogICAgICAgIDxDb250ZW50IC8+CiAgICAgICAgPEJsb2cgLz4KICAgICAgPC9tYWluPgogICAgICA8Rm9vdGVyIC8+CiAgICA8Lz4KICApCn0KCgoKCmZ1bmN0aW9uIENvbnRlbnQoKSB7CiAgcmV0dXJuICgKICAgIDxkaXYgY2xhc3NOYW1lPSJyZWxhdGl2ZSBvdmVyZmxvdy1oaWRkZW4gYmctd2hpdGUgcHktMTYiPgogICAgICA8ZGl2IGNsYXNzTmFtZT0iaGlkZGVuIGxnOmFic29sdXRlIGxnOmluc2V0LXktMCBsZzpibG9jayBsZzpoLWZ1bGwgbGc6dy1mdWxsIGxnOltvdmVyZmxvdy1hbmNob3I6bm9uZV0iPgogICAgICAgIDxkaXYgY2xhc3NOYW1lPSJyZWxhdGl2ZSBteC1hdXRvIGgtZnVsbCBtYXgtdy1wcm9zZSB0ZXh0LWxnIiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICA8c3ZnCiAgICAgICAgICAgIGNsYXNzTmFtZT0iYWJzb2x1dGUgdG9wLTEyIGxlZnQtZnVsbCB0cmFuc2xhdGUteC0zMiB0cmFuc2Zvcm0iCiAgICAgICAgICAgIHdpZHRoPXs0MDR9CiAgICAgICAgICAgIGhlaWdodD17Mzg0fQogICAgICAgICAgICBmaWxsPSJub25lIgogICAgICAgICAgICB2aWV3Qm94PSIwIDAgNDA0IDM4NCIKICAgICAgICAgID4KICAgICAgICAgICAgPGRlZnM+CiAgICAgICAgICAgICAgPHBhdHRlcm4KICAgICAgICAgICAgICAgIGlkPSI3NGIzZmQ5OS0wYTZmLTQyNzEtYmVmMi1lODBlZWFmZGYzNTciCiAgICAgICAgICAgICAgICB4PXswfQogICAgICAgICAgICAgICAgeT17MH0KICAgICAgICAgICAgICAgIHdpZHRoPXsyMH0KICAgICAgICAgICAgICAgIGhlaWdodD17MjB9CiAgICAgICAgICAgICAgICBwYXR0ZXJuVW5pdHM9InVzZXJTcGFjZU9uVXNlIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxyZWN0IHg9ezB9IHk9ezB9IHdpZHRoPXs0fSBoZWlnaHQ9ezR9IGNsYXNzTmFtZT0idGV4dC1ncmF5LTIwMCIgZmlsbD0iY3VycmVudENvbG9yIiAvPgogICAgICAgICAgICAgIDwvcGF0dGVybj4KICAgICAgICAgICAgPC9kZWZzPgogICAgICAgICAgICA8cmVjdCB3aWR0aD17NDA0fSBoZWlnaHQ9ezM4NH0gZmlsbD0idXJsKCM3NGIzZmQ5OS0wYTZmLTQyNzEtYmVmMi1lODBlZWFmZGYzNTcpIiAvPgogICAgICAgICAgPC9zdmc+CiAgICAgICAgICA8c3ZnCiAgICAgICAgICAgIGNsYXNzTmFtZT0iYWJzb2x1dGUgdG9wLTEvMiByaWdodC1mdWxsIC10cmFuc2xhdGUteS0xLzIgLXRyYW5zbGF0ZS14LTMyIHRyYW5zZm9ybSIKICAgICAgICAgICAgd2lkdGg9ezQwNH0KICAgICAgICAgICAgaGVpZ2h0PXszODR9CiAgICAgICAgICAgIGZpbGw9Im5vbmUiCiAgICAgICAgICAgIHZpZXdCb3g9IjAgMCA0MDQgMzg0IgogICAgICAgICAgPgogICAgICAgICAgICA8ZGVmcz4KICAgICAgICAgICAgICA8cGF0dGVybgogICAgICAgICAgICAgICAgaWQ9ImYyMTBkYmY2LWE1OGQtNDg3MS05NjFlLTM2ZDUwMTZhMGY0OSIKICAgICAgICAgICAgICAgIHg9ezB9CiAgICAgICAgICAgICAgICB5PXswfQogICAgICAgICAgICAgICAgd2lkdGg9ezIwfQogICAgICAgICAgICAgICAgaGVpZ2h0PXsyMH0KICAgICAgICAgICAgICAgIHBhdHRlcm5Vbml0cz0idXNlclNwYWNlT25Vc2UiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPHJlY3QgeD17MH0geT17MH0gd2lkdGg9ezR9IGhlaWdodD17NH0gY2xhc3NOYW1lPSJ0ZXh0LWdyYXktMjAwIiBmaWxsPSJjdXJyZW50Q29sb3IiIC8+CiAgICAgICAgICAgICAgPC9wYXR0ZXJuPgogICAgICAgICAgICA8L2RlZnM+CiAgICAgICAgICAgIDxyZWN0IHdpZHRoPXs0MDR9IGhlaWdodD17Mzg0fSBmaWxsPSJ1cmwoI2YyMTBkYmY2LWE1OGQtNDg3MS05NjFlLTM2ZDUwMTZhMGY0OSkiIC8+CiAgICAgICAgICA8L3N2Zz4KICAgICAgICAgIDxzdmcKICAgICAgICAgICAgY2xhc3NOYW1lPSJhYnNvbHV0ZSBib3R0b20tMTIgbGVmdC1mdWxsIHRyYW5zbGF0ZS14LTMyIHRyYW5zZm9ybSIKICAgICAgICAgICAgd2lkdGg9ezQwNH0KICAgICAgICAgICAgaGVpZ2h0PXszODR9CiAgICAgICAgICAgIGZpbGw9Im5vbmUiCiAgICAgICAgICAgIHZpZXdCb3g9IjAgMCA0MDQgMzg0IgogICAgICAgICAgPgogICAgICAgICAgICA8ZGVmcz4KICAgICAgICAgICAgICA8cGF0dGVybgogICAgICAgICAgICAgICAgaWQ9ImQzZWIwN2FlLTUxODItNDNlNi04NTdkLTM1YzY0M2FmOTAzNCIKICAgICAgICAgICAgICAgIHg9ezB9CiAgICAgICAgICAgICAgICB5PXswfQogICAgICAgICAgICAgICAgd2lkdGg9ezIwfQogICAgICAgICAgICAgICAgaGVpZ2h0PXsyMH0KICAgICAgICAgICAgICAgIHBhdHRlcm5Vbml0cz0idXNlclNwYWNlT25Vc2UiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPHJlY3QgeD17MH0geT17MH0gd2lkdGg9ezR9IGhlaWdodD17NH0gY2xhc3NOYW1lPSJ0ZXh0LWdyYXktMjAwIiBmaWxsPSJjdXJyZW50Q29sb3IiIC8+CiAgICAgICAgICAgICAgPC9wYXR0ZXJuPgogICAgICAgICAgICA8L2RlZnM+CiAgICAgICAgICAgIDxyZWN0IHdpZHRoPXs0MDR9IGhlaWdodD17Mzg0fSBmaWxsPSJ1cmwoI2QzZWIwN2FlLTUxODItNDNlNi04NTdkLTM1YzY0M2FmOTAzNCkiIC8+CiAgICAgICAgICA8L3N2Zz4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3NOYW1lPSJyZWxhdGl2ZSBweC00IHNtOnB4LTYgbGc6cHgtOCI+CgoKICAgICAgICB7LyogSW50cm9kdWN0aW9uICovfQogICAgICAgIDxJbnRyb2R1Y3Rpb24gLz4KCiAgICAgICAgey8qIGNvbnRlbnUgKi99CiAgICAgICAgPGRpdiBjbGFzc05hbWU9InByb3NlIHByb3NlLWxnIHByb3NlLWluZGlnbyBteC1hdXRvIHRleHQtZ3JheS01MDAgIj4KCgogICAgICAgICAgPENvbnRlbnUgLz4KCgogICAgICAgICAgPGRpdiBjbGFzc05hbWU9J210LTIwJz4KICAgICAgICAgICAgPENvbmNsdXNpb24gLz4KICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICkKfQ=="}, "giftforguitarist.jsx": {"filename": "giftforguitarist.jsx", "relpath": "src/pages/template/top/giftforguitarist.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/top/giftforguitarist.jsx", "data": ""}, "tradingPlateform.jsx": {"filename": "tradingPlateform.jsx", "relpath": "src/pages/template/top/tradingPlateform.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/top/tradingPlateform.jsx", "data": ""}, "giftfortech.jsx": {"filename": "giftfortech.jsx", "relpath": "src/pages/template/top/giftfortech.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/top/giftfortech.jsx", "data": ""}, "ex2.jsx": {"filename": "ex2.jsx", "relpath": "src/pages/template/top/ex2.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/top/ex2.jsx", "data": ""}, "giftforwoman.jsx": {"filename": "giftforwoman.jsx", "relpath": "src/pages/template/top/giftforwoman.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/top/giftforwoman.jsx", "data": ""}, "a.jsx": {"filename": "a.jsx", "relpath": "src/pages/template/top/a.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/top/a.jsx", "data": ""}, "exchanges.jsx": {"filename": "exchanges.jsx", "relpath": "src/pages/template/top/exchanges.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/top/exchanges.jsx", "data": ""}, "giftforgardener.jsx": {"filename": "giftforgardener.jsx", "relpath": "src/pages/template/top/giftforgardener.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/top/giftforgardener.jsx", "data": ""}, "giftforman.jsx": {"filename": "giftforman.jsx", "relpath": "src/pages/template/top/giftforman.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/top/giftforman.jsx", "data": ""}, "article.jsx": {"filename": "article.jsx", "relpath": "src/pages/template/top/article.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/top/article.jsx", "data": ""}, "top3exchanges10.jsx": {"filename": "top3exchanges10.jsx", "relpath": "src/pages/template/top/crypto/top3exchanges10.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/top/crypto/top3exchanges10.jsx", "data": ""}, "top3exchanges15.jsx": {"filename": "top3exchanges15.jsx", "relpath": "src/pages/template/top/crypto/top3exchanges15.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/top/crypto/top3exchanges15.jsx", "data": ""}, "top3exchanges6.jsx": {"filename": "top3exchanges6.jsx", "relpath": "src/pages/template/top/crypto/top3exchanges6.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/top/crypto/top3exchanges6.jsx", "data": "Ly8gYSBjaGFuZ2VyICEKY29uc3QgdGl0cmVPbmdsZXQgPSAiV2Vrbm93IC0gVG9wIDMgY3J5cHRvIHRyYWRpbmcgcGxhdGVmb3JtIgpjb25zdCBkZXNjcmlwdGlvbiA9ICJ0b3AgMyBjcnlwdG8gZXhjaGFuZ2VzIC0gSHVvYmksIHdoaXRlYml0LCBhbmQgY29pbnNiaXQuIEVhY2ggZXhjaGFuZ2UgaXMga25vd24gZm9yIGl0cyBzZWN1cml0eSwgd2lkZSByYW5nZSBvZiB0cmFkaW5nIG9wdGlvbnMsIHVzZXItZnJpZW5kbHkgcGxhdGZvcm1zLCBhbmQgc3Ryb25nIGN1c3RvbWVyIHN1cHBvcnQgdGVhbXMuIFRoZXNlIGV4Y2hhbmdlcyBhcmUgc3VpdGFibGUgZm9yIGJvdGggYmVnaW5uZXJzIGFuZCBleHBlcmllbmNlZCB0cmFkZXJzLiBPdmVyYWxsLCB0aGV5IGFyZSByZWxpYWJsZSBjaG9pY2VzIGZvciB0cmFkaW5nIGNyeXB0by4iCgpjb25zdCBzdWpldCA9ICJDcnlwdG8iCmNvbnN0IHRpdHJlID0gIlRvcCAzIGNyeXB0byB0cmFkaW5nIHBsYXRlZm9ybSIKCgoKCmltcG9ydCBJbWFnZSBmcm9tICduZXh0L2ltYWdlJwppbXBvcnQgSGVhZCBmcm9tICduZXh0L2hlYWQnCmltcG9ydCB7IExvZ28gfSBmcm9tICdAL2ltYWdlcy9sb2dvLnN2ZycKaW1wb3J0IHsgRm9vdGVyIH0gZnJvbSAnQC9jb21wb25lbnRzL0Zvb3RlcicKaW1wb3J0IHsgSGVhZGVyIH0gZnJvbSAnQC9jb21wb25lbnRzL0hlYWRlcicKaW1wb3J0IHsgQmxvZyB9IGZyb20gJ0AvY29tcG9uZW50cy9CbG9nJwppbXBvcnQgeyBUb3AgfSBmcm9tICdAL2NvbXBvbmVudHMvYmxvZy9Ub3AnCmltcG9ydCB7IFRvcFRpdHJlIH0gZnJvbSAnQC9jb21wb25lbnRzL2Jsb2cvVG9wVGl0cmUnCmltcG9ydCB7IExpc3QgfSBmcm9tICdAL2NvbXBvbmVudHMvYmxvZy9MaXN0JwppbXBvcnQgeyBMaWVuIH0gZnJvbSAnQC9jb21wb25lbnRzL2Jsb2cvTGllbicKaW1wb3J0IHsgVmlzaXRCdXR0b24gfSBmcm9tICdAL2NvbXBvbmVudHMvYnV0dG9uL1Zpc2l0QnV0dG9uJwoKaW1wb3J0IHsgVXNlckhlYWRlciB9IGZyb20gJ0AvY29tcG9uZW50cy9Vc2VySGVhZGVyJwppbXBvcnQgeyBJbWFnZXNHcmlkIH0gZnJvbSAnQC9jb21wb25lbnRzL2Jsb2cvSW1hZ2VzR3JpZCcKCgppbXBvcnQgeyBJbnRyb2R1Y3Rpb25UZXh0IH0gZnJvbSAnQC9jb21wb25lbnRzL2Jsb2cvSW50cm9kdWN0aW9uVGV4dCcKaW1wb3J0IHsgU3VqZXQgfSBmcm9tICdAL2NvbXBvbmVudHMvYmxvZy9TdWpldCcKaW1wb3J0IHsgVGl0cmUgfSBmcm9tICdAL2NvbXBvbmVudHMvYmxvZy9UaXRyZScKaW1wb3J0IHN0YXRpY0ZpbGUgZnJvbSAiQC9qcy91dGlscyIKCmNvbnN0IGNvbG9yID0gInRleHQtaW5kaWdvLTYwMCIKCgpmdW5jdGlvbiBJbnRyb2R1Y3Rpb24oKXsKICByZXR1cm4gKAogICAgPD4KICAgICAgPGRpdiBjbGFzc05hbWU9Im14LWF1dG8gbWF4LXctcHJvc2UgdGV4dC1sZyBmbGV4IGZsZXgtY29sIGl0ZW1zLWNlbnRlciI+CiAgICAgICAgPFVzZXJIZWFkZXIgLz4KICAgICAgICAKICAgICAgICA8U3VqZXQgY2xhc3NOYW1lPXtjb2xvcn0+e3N1amV0fTwvU3VqZXQ+CiAgICAgICAgPFRpdHJlPnt0aXRyZX08L1RpdHJlPgogICAgICAKICAgICAgICA8SW50cm9kdWN0aW9uVGV4dD57ZGVzY3JpcHRpb259PC9JbnRyb2R1Y3Rpb25UZXh0PgogICAgICA8L2Rpdj4KICAgIDwvPgogICkKfQoKZnVuY3Rpb24gQ29udGVudSgpewogIHJldHVybiAoCiAgICA8PgoKICA8ZGl2IGNsYXNzTmFtZT0nbXQtMTAnPgoKICA8aDM+MS4gZGVsdGEuZXhjaGFuZ2U8L2gzPgo8cD5kZWx0YS5leGNoYW5nZSBpcyBhIGN1dHRpbmctZWRnZSBwbGF0Zm9ybSB0aGF0IG9mZmVycyBhIHdpZGUgcmFuZ2Ugb2YgdHJhZGluZyBvcHRpb25zIGFuZCBsb3cgZmVlcy4gSXQgaXMgdXNlci1mcmllbmRseSBhbmQgaGFzIGEgc3Ryb25nIGN1c3RvbWVyIHN1cHBvcnQgdGVhbSB0aGF0IGlzIGF2YWlsYWJsZSB0byBhc3Npc3QgdXNlcnMgd2l0aCBhbnkgaXNzdWVzIG9yIHF1ZXN0aW9ucyB0aGV5IG1heSBoYXZlLiBJdCBpcyBrbm93biBmb3IgaXRzIHNlY3VyaXR5IGFuZCBpcyBhIGdvb2QgY2hvaWNlIGZvciBib3RoIGJlZ2lubmVycyBhbmQgZXhwZXJpZW5jZWQgdHJhZGVycy48L3A+CjxWaXNpdEJ1dHRvbiBocmVmPSJodHRwczovL3d3dy5kZWx0YS5leGNoYW5nZS8/Y29kZT1DU05VSUMiPlZpc2l0IGRlbHRhLmV4Y2hhbmdlIFdlYnNpdGU8L1Zpc2l0QnV0dG9uPgo8aDM+Mi4gYmlzd2FwPC9oMz4KPHA+Ymlzd2FwIGlzIGEgcmVsaWFibGUgZXhjaGFuZ2UgdGhhdCBvZmZlcnMgYSB3aWRlIHJhbmdlIG9mIHRyYWRpbmcgb3B0aW9ucyBhbmQgbG93IGZlZXMuIEl0IGlzIHVzZXItZnJpZW5kbHkgYW5kIGhhcyBhIHN0cm9uZyBjdXN0b21lciBzdXBwb3J0IHRlYW0gdGhhdCBpcyBhdmFpbGFibGUgdG8gYXNzaXN0IHVzZXJzIHdpdGggYW55IGlzc3VlcyBvciBxdWVzdGlvbnMgdGhleSBtYXkgaGF2ZS4gSXQgaXMga25vd24gZm9yIGl0cyBzZWN1cml0eSBhbmQgaXMgYSBnb29kIGNob2ljZSBmb3IgYm90aCBiZWdpbm5lcnMgYW5kIGV4cGVyaWVuY2VkIHRyYWRlcnMuPC9wPgo8VmlzaXRCdXR0b24gaHJlZj0iaHR0cHM6Ly9iaXN3YXAub3JnLz9yZWY9ZWFkNDBiZmU4MWFjOGVjNGRiNjEiPlZpc2l0IGJpc3dhcCBXZWJzaXRlPC9WaXNpdEJ1dHRvbj4KPGgzPjMuIHBlcnA8cD5UaGVzZSB0b3AgdGhyZWUgZXhjaGFuZ2VzIG9mZmVyIGEgdmFyaWV0eSBvZiB0cmFkaW5nIG9wdGlvbnMsIGxvdyBmZWVzLCBhbmQgc3Ryb25nIGN1c3RvbWVyIHN1cHBvcnQuIFdoZXRoZXIgeW91IGFyZSBhIGJlZ2lubmVyIG9yIGV4cGVyaWVuY2VkIHRyYWRlciwgdGhlc2UgZXhjaGFuZ2VzIGFyZSB3b3J0aCBjb25zaWRlcmluZyBmb3IgeW91ciBjcnlwdG8gdHJhZGluZyBuZWVkcy48L3A+IgpldHVhbCBwcm90b2NvbDwvaDM+CjxwPnBlcnBldHVhbCBwcm90b2NvbCBpcyBhIHdlbGwtcmVzcGVjdGVkIGV4Y2hhbmdlIHRoYXQgaXMga25vd24gZm9yIGl0cyBzZWN1cml0eSBhbmQgd2lkZSByYW5nZSBvZiB0cmFkaW5nIG9wdGlvbnMuIFRoZSBwbGF0Zm9ybSBpcyB1c2VyLWZyaWVuZGx5IGFuZCBvZmZlcnMgYSB2YXJpZXR5IG9mIGZlYXR1cmVzIHRvIGhlbHAgdHJhZGVycyBtYWtlIGluZm9ybWVkIGRlY2lzaW9ucy4gSXQgYWxzbyBoYXMgYSBzdHJvbmcgY3VzdG9tZXIgc3VwcG9ydCB0ZWFtIHRoYXQgaXMgYXZhaWxhYmxlIHRvIGFzc2lzdCB1c2VycyB3aXRoIGFueSBpc3N1ZXMgb3IgcXVlc3Rpb25zIHRoZXkgbWF5IGhhdmUuPC9wPgo8VmlzaXRCdXR0b24gaHJlZj0iaHR0cHM6Ly9hcHAucGVycC5jb20/Y29kZT13ZWtub3ciPlZpc2l0IHBlcnBldHVhbCBwcm90b2NvbCBXZWJzaXRlPC9WaXNpdEJ1dHRvbj4KICA8L2Rpdj4KCiAgICA8Lz4KICApCn0KCmZ1bmN0aW9uIENvbmNsdXNpb24oKXsKICByZXR1cm4gKAogICAgPD4KCgoKICAgIDwvPgogICkKfQoKCmZ1bmN0aW9uIENvbnRlbnQoKSB7CiAgcmV0dXJuICgKICAgIDxkaXYgY2xhc3NOYW1lPSJyZWxhdGl2ZSBvdmVyZmxvdy1oaWRkZW4gYmctd2hpdGUgcHktMTYiPgogICAgICA8ZGl2IGNsYXNzTmFtZT0iaGlkZGVuIGxnOmFic29sdXRlIGxnOmluc2V0LXktMCBsZzpibG9jayBsZzpoLWZ1bGwgbGc6dy1mdWxsIGxnOltvdmVyZmxvdy1hbmNob3I6bm9uZV0iPgogICAgICAgIDxkaXYgY2xhc3NOYW1lPSJyZWxhdGl2ZSBteC1hdXRvIGgtZnVsbCBtYXgtdy1wcm9zZSB0ZXh0LWxnIiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICA8c3ZnCiAgICAgICAgICAgIGNsYXNzTmFtZT0iYWJzb2x1dGUgdG9wLTEyIGxlZnQtZnVsbCB0cmFuc2xhdGUteC0zMiB0cmFuc2Zvcm0iCiAgICAgICAgICAgIHdpZHRoPXs0MDR9CiAgICAgICAgICAgIGhlaWdodD17Mzg0fQogICAgICAgICAgICBmaWxsPSJub25lIgogICAgICAgICAgICB2aWV3Qm94PSIwIDAgNDA0IDM4NCIKICAgICAgICAgID4KICAgICAgICAgICAgPGRlZnM+CiAgICAgICAgICAgICAgPHBhdHRlcm4KICAgICAgICAgICAgICAgIGlkPSI3NGIzZmQ5OS0wYTZmLTQyNzEtYmVmMi1lODBlZWFmZGYzNTciCiAgICAgICAgICAgICAgICB4PXswfQogICAgICAgICAgICAgICAgeT17MH0KICAgICAgICAgICAgICAgIHdpZHRoPXsyMH0KICAgICAgICAgICAgICAgIGhlaWdodD17MjB9CiAgICAgICAgICAgICAgICBwYXR0ZXJuVW5pdHM9InVzZXJTcGFjZU9uVXNlIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxyZWN0IHg9ezB9IHk9ezB9IHdpZHRoPXs0fSBoZWlnaHQ9ezR9IGNsYXNzTmFtZT0idGV4dC1ncmF5LTIwMCIgZmlsbD0iY3VycmVudENvbG9yIiAvPgogICAgICAgICAgICAgIDwvcGF0dGVybj4KICAgICAgICAgICAgPC9kZWZzPgogICAgICAgICAgICA8cmVjdCB3aWR0aD17NDA0fSBoZWlnaHQ9ezM4NH0gZmlsbD0idXJsKCM3NGIzZmQ5OS0wYTZmLTQyNzEtYmVmMi1lODBlZWFmZGYzNTcpIiAvPgogICAgICAgICAgPC9zdmc+CiAgICAgICAgICA8c3ZnCiAgICAgICAgICAgIGNsYXNzTmFtZT0iYWJzb2x1dGUgdG9wLTEvMiByaWdodC1mdWxsIC10cmFuc2xhdGUteS0xLzIgLXRyYW5zbGF0ZS14LTMyIHRyYW5zZm9ybSIKICAgICAgICAgICAgd2lkdGg9ezQwNH0KICAgICAgICAgICAgaGVpZ2h0PXszODR9CiAgICAgICAgICAgIGZpbGw9Im5vbmUiCiAgICAgICAgICAgIHZpZXdCb3g9IjAgMCA0MDQgMzg0IgogICAgICAgICAgPgogICAgICAgICAgICA8ZGVmcz4KICAgICAgICAgICAgICA8cGF0dGVybgogICAgICAgICAgICAgICAgaWQ9ImYyMTBkYmY2LWE1OGQtNDg3MS05NjFlLTM2ZDUwMTZhMGY0OSIKICAgICAgICAgICAgICAgIHg9ezB9CiAgICAgICAgICAgICAgICB5PXswfQogICAgICAgICAgICAgICAgd2lkdGg9ezIwfQogICAgICAgICAgICAgICAgaGVpZ2h0PXsyMH0KICAgICAgICAgICAgICAgIHBhdHRlcm5Vbml0cz0idXNlclNwYWNlT25Vc2UiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPHJlY3QgeD17MH0geT17MH0gd2lkdGg9ezR9IGhlaWdodD17NH0gY2xhc3NOYW1lPSJ0ZXh0LWdyYXktMjAwIiBmaWxsPSJjdXJyZW50Q29sb3IiIC8+CiAgICAgICAgICAgICAgPC9wYXR0ZXJuPgogICAgICAgICAgICA8L2RlZnM+CiAgICAgICAgICAgIDxyZWN0IHdpZHRoPXs0MDR9IGhlaWdodD17Mzg0fSBmaWxsPSJ1cmwoI2YyMTBkYmY2LWE1OGQtNDg3MS05NjFlLTM2ZDUwMTZhMGY0OSkiIC8+CiAgICAgICAgICA8L3N2Zz4KICAgICAgICAgIDxzdmcKICAgICAgICAgICAgY2xhc3NOYW1lPSJhYnNvbHV0ZSBib3R0b20tMTIgbGVmdC1mdWxsIHRyYW5zbGF0ZS14LTMyIHRyYW5zZm9ybSIKICAgICAgICAgICAgd2lkdGg9ezQwNH0KICAgICAgICAgICAgaGVpZ2h0PXszODR9CiAgICAgICAgICAgIGZpbGw9Im5vbmUiCiAgICAgICAgICAgIHZpZXdCb3g9IjAgMCA0MDQgMzg0IgogICAgICAgICAgPgogICAgICAgICAgICA8ZGVmcz4KICAgICAgICAgICAgICA8cGF0dGVybgogICAgICAgICAgICAgICAgaWQ9ImQzZWIwN2FlLTUxODItNDNlNi04NTdkLTM1YzY0M2FmOTAzNCIKICAgICAgICAgICAgICAgIHg9ezB9CiAgICAgICAgICAgICAgICB5PXswfQogICAgICAgICAgICAgICAgd2lkdGg9ezIwfQogICAgICAgICAgICAgICAgaGVpZ2h0PXsyMH0KICAgICAgICAgICAgICAgIHBhdHRlcm5Vbml0cz0idXNlclNwYWNlT25Vc2UiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPHJlY3QgeD17MH0geT17MH0gd2lkdGg9ezR9IGhlaWdodD17NH0gY2xhc3NOYW1lPSJ0ZXh0LWdyYXktMjAwIiBmaWxsPSJjdXJyZW50Q29sb3IiIC8+CiAgICAgICAgICAgICAgPC9wYXR0ZXJuPgogICAgICAgICAgICA8L2RlZnM+CiAgICAgICAgICAgIDxyZWN0IHdpZHRoPXs0MDR9IGhlaWdodD17Mzg0fSBmaWxsPSJ1cmwoI2QzZWIwN2FlLTUxODItNDNlNi04NTdkLTM1YzY0M2FmOTAzNCkiIC8+CiAgICAgICAgICA8L3N2Zz4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3NOYW1lPSJyZWxhdGl2ZSBweC00IHNtOnB4LTYgbGc6cHgtOCAiPgoKCiAgICAgICAgey8qIEludHJvZHVjdGlvbiAqL30KICAgICAgICA8SW50cm9kdWN0aW9uIC8+CgogICAgICAgIHsvKiBjb250ZW51ICovfQogICAgICAgIDxkaXYgY2xhc3NOYW1lPSJwcm9zZSBwcm9zZS1sZyBwcm9zZS1pbmRpZ28gbXgtYXV0byB0ZXh0LWdyYXktNTAwICI+CgoKICAgICAgICAgIDxDb250ZW51IC8+CgoKICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdtdC0yMCc+CiAgICAgICAgICAgIDxDb25jbHVzaW9uIC8+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICApCn0KCgoKCmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEhvbWUoKSB7CiAgcmV0dXJuICgKICAgIDw+CiAgICAgIDxIZWFkPgogICAgICAgIDxsaW5rIHJlbD0iaWNvbiIgaHJlZj17c3RhdGljRmlsZSgiZmF2aWNvbi5pY28iKX0gdHlwZT0iaW1hZ2UveC1pY29uIiAvPgogICAgICAgIDx0aXRsZT57dGl0cmVPbmdsZXR9PC90aXRsZT4KICAgICAgICA8bWV0YSBodHRwRXF1aXY9J0NvbnRlbnQtVHlwZScgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PXV0Zi04IiAvPgogICAgICAgIDxtZXRhCiAgICAgICAgICBuYW1lPSJkZXNjcmlwdGlvbiIKICAgICAgICAgIGNvbnRlbnQ9e2Rlc2NyaXB0aW9ufQogICAgICAgIC8+CiAgICAgIDwvSGVhZD4KICAgICAgPEhlYWRlciAvPgogICAgICA8bWFpbj4KICAgICAgICA8Q29udGVudCAvPgogICAgICAgIDxCbG9nIC8+CiAgICAgIDwvbWFpbj4KICAgICAgPEZvb3RlciAvPgogICAgPC8+CiAgKQp9CgoKCgo="}, "top3exchanges4.jsx": {"filename": "top3exchanges4.jsx", "relpath": "src/pages/template/top/crypto/top3exchanges4.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/top/crypto/top3exchanges4.jsx", "data": ""}, "top3exchanges5.jsx": {"filename": "top3exchanges5.jsx", "relpath": "src/pages/template/top/crypto/top3exchanges5.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/top/crypto/top3exchanges5.jsx", "data": ""}, "top3exchanges2.jsx": {"filename": "top3exchanges2.jsx", "relpath": "src/pages/template/top/crypto/top3exchanges2.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/top/crypto/top3exchanges2.jsx", "data": ""}, "top3exchanges0.jsx": {"filename": "top3exchanges0.jsx", "relpath": "src/pages/template/top/crypto/top3exchanges0.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/top/crypto/top3exchanges0.jsx", "data": ""}, "top3exchanges1.jsx": {"filename": "top3exchanges1.jsx", "relpath": "src/pages/template/top/crypto/top3exchanges1.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/top/crypto/top3exchanges1.jsx", "data": "Ly8gYSBjaGFuZ2VyICEKY29uc3QgdGl0cmVPbmdsZXQgPSAiV2Vrbm93IC0gVG9wIDMgY3J5cHRvIHRyYWRpbmcgcGxhdGVmb3JtIgpjb25zdCBkZXNjcmlwdGlvbiA9ICIgdGhyZWUgY3J5cHRvY3VycmVuY3kgZXhjaGFuZ2VzOiBQb2xvbmlleCwgQml0Rm9yZXgsIGFuZCBQcm9iaXQuIFBvbG9uaWV4IGlzIGEgVVMtYmFzZWQgZXhjaGFuZ2Ugd2l0aCBhZHZhbmNlZCB0cmFkaW5nIGZlYXR1cmVzIGFuZCBhIHN0cm9uZyByZXB1dGF0aW9uIGZvciBzZWN1cml0eS4gQml0Rm9yZXggaXMgYSBkaWdpdGFsIGFzc2V0IHRyYWRpbmcgcGxhdGZvcm0gd2l0aCBhIHVzZXItZnJpZW5kbHkgaW50ZXJmYWNlIGFuZCBmYXN0IHRyYW5zYWN0aW9uIHNwZWVkcy4gUHJvYml0IGlzIGEgZ2xvYmFsIGV4Y2hhbmdlIHdpdGggYSBmb2N1cyBvbiBzZWN1cml0eSBhbmQgZmFzdCB0cmFuc2FjdGlvbiBzcGVlZHMuIFRoZXNlIGV4Y2hhbmdlcyBvZmZlciBhIHJhbmdlIG9mIHRyYWRpbmcgcGFpcnMgYW5kIG90aGVyIGZlYXR1cmVzLCBzdWNoIGFzIGxvdyBmZWVzIGFuZCBoaWdoIGxpcXVpZGl0eS4iCgpjb25zdCBzdWpldCA9ICJDcnlwdG8iCmNvbnN0IHRpdHJlID0gIlRvcCAzIGNyeXB0byB0cmFkaW5nIHBsYXRlZm9ybSIKCgoKCmltcG9ydCBJbWFnZSBmcm9tICduZXh0L2ltYWdlJwppbXBvcnQgSGVhZCBmcm9tICduZXh0L2hlYWQnCmltcG9ydCB7IExvZ28gfSBmcm9tICdAL2ltYWdlcy9sb2dvLnN2ZycKaW1wb3J0IHsgRm9vdGVyIH0gZnJvbSAnQC9jb21wb25lbnRzL0Zvb3RlcicKaW1wb3J0IHsgSGVhZGVyIH0gZnJvbSAnQC9jb21wb25lbnRzL0hlYWRlcicKaW1wb3J0IHsgQmxvZyB9IGZyb20gJ0AvY29tcG9uZW50cy9CbG9nJwppbXBvcnQgeyBUb3AgfSBmcm9tICdAL2NvbXBvbmVudHMvYmxvZy9Ub3AnCmltcG9ydCB7IFRvcFRpdHJlIH0gZnJvbSAnQC9jb21wb25lbnRzL2Jsb2cvVG9wVGl0cmUnCmltcG9ydCB7IExpc3QgfSBmcm9tICdAL2NvbXBvbmVudHMvYmxvZy9MaXN0JwppbXBvcnQgeyBMaWVuIH0gZnJvbSAnQC9jb21wb25lbnRzL2Jsb2cvTGllbicKaW1wb3J0IHsgVmlzaXRCdXR0b24gfSBmcm9tICdAL2NvbXBvbmVudHMvYnV0dG9uL1Zpc2l0QnV0dG9uJwoKaW1wb3J0IHsgVXNlckhlYWRlciB9IGZyb20gJ0AvY29tcG9uZW50cy9Vc2VySGVhZGVyJwppbXBvcnQgeyBJbWFnZXNHcmlkIH0gZnJvbSAnQC9jb21wb25lbnRzL2Jsb2cvSW1hZ2VzR3JpZCcKCgppbXBvcnQgeyBJbnRyb2R1Y3Rpb25UZXh0IH0gZnJvbSAnQC9jb21wb25lbnRzL2Jsb2cvSW50cm9kdWN0aW9uVGV4dCcKaW1wb3J0IHsgU3VqZXQgfSBmcm9tICdAL2NvbXBvbmVudHMvYmxvZy9TdWpldCcKaW1wb3J0IHsgVGl0cmUgfSBmcm9tICdAL2NvbXBvbmVudHMvYmxvZy9UaXRyZScKaW1wb3J0IHN0YXRpY0ZpbGUgZnJvbSAiQC9qcy91dGlscyIKCmNvbnN0IGNvbG9yID0gInRleHQtaW5kaWdvLTYwMCIKCgpmdW5jdGlvbiBJbnRyb2R1Y3Rpb24oKXsKICByZXR1cm4gKAogICAgPD4KICAgICAgPGRpdiBjbGFzc05hbWU9Im14LWF1dG8gbWF4LXctcHJvc2UgdGV4dC1sZyBmbGV4IGZsZXgtY29sIGl0ZW1zLWNlbnRlciI+CiAgICAgICAgPFVzZXJIZWFkZXIgLz4KICAgICAgICAKICAgICAgICA8U3VqZXQgY2xhc3NOYW1lPXtjb2xvcn0+e3N1amV0fTwvU3VqZXQ+CiAgICAgICAgPFRpdHJlPnt0aXRyZX08L1RpdHJlPgogICAgICAKICAgICAgICA8SW50cm9kdWN0aW9uVGV4dD57ZGVzY3JpcHRpb259PC9JbnRyb2R1Y3Rpb25UZXh0PgogICAgICA8L2Rpdj4KICAgIDwvPgogICkKfQoKZnVuY3Rpb24gQ29udGVudSgpewogIHJldHVybiAoCiAgICA8PgoKCjxUb3A+CiAgPFRvcFRpdHJlPjxhIGhyZWY9J2h0dHBzOi8vd3d3LmNvaW5leC5jb20vcmVnaXN0ZXI/cmVmZXJfY29kZT1naHR5YScgdGFyZ2V0PXsiX2JsYW5rIn0gcmVsPSJub3JlZmVycmVyIiBjbGFzc05hbWU9J25vLXVuZGVybGluZSB0ZXh0LWJsYWNrIGZvbnQtYm9sZCc+MS4gQ29pbmV4PC9hPjwvVG9wVGl0cmU+CiAgPHA+Q29pbmV4IGlzIGEgZ2xvYmFsIGRpZ2l0YWwgYXNzZXQgdHJhZGluZyBwbGF0Zm9ybSB0aGF0IHByb3ZpZGVzIHNhZmUsIHN0YWJsZSwgYW5kIGNvbnZlbmllbnQgdHJhZGluZyBzZXJ2aWNlcyBmb3IgZ2xvYmFsIHVzZXJzLiBJdCBpcyBjb21taXR0ZWQgdG8gYnVpbGRpbmcgYSBjb21wcmVoZW5zaXZlIGRpZ2l0YWwgYXNzZXQgdHJhZGluZyBwbGF0Zm9ybSB0aGF0IHNlcnZlcyBnbG9iYWwgdXNlcnMuPC9wPgogIDxMaXN0PgogICAgPGxpPlByb3ZpZGVzIGEgd2lkZSByYW5nZSBvZiBkaWdpdGFsIGFzc2V0IHRyYWRpbmcgc2VydmljZXM8L2xpPgogICAgPGxpPk9mZmVycyBhIHVzZXItZnJpZW5kbHkgaW50ZXJmYWNlIGZvciBlYXN5IG5hdmlnYXRpb248L2xpPgogIDwvTGlzdD4KICA8VmlzaXRCdXR0b24gaHJlZj0naHR0cHM6Ly93d3cuY29pbmV4LmNvbS9yZWdpc3Rlcj9yZWZlcl9jb2RlPWdodHlhJz5WaXNpdCBDb2luZXggV2Vic2l0ZTwvVmlzaXRCdXR0b24+CjwvVG9wPgo8VG9wPgogIDxUb3BUaXRyZT48YSBocmVmPSdodHRwczovL2FwcC5vcGVub2NlYW4uZmluYW5jZS9yZWZlcnJhbC9kQXYwMy1Sb0RvbTNVcTQ0cnJFWjVaOTltdWtTdHdiVDRyMUNQck9FeUFlc2h4OHQ1Q0Jka1lycDAtdjdvTWVjJyB0YXJnZXQ9eyJfYmxhbmsifSByZWw9Im5vcmVmZXJyZXIiIGNsYXNzTmFtZT0nbm8tdW5kZXJsaW5lIHRleHQtYmxhY2sgZm9udC1ib2xkJz4yLiBPcGVuT2NlYW48L2E+PC9Ub3BUaXRyZT4KICA8cD5PcGVuT2NlYW4gaXMgYSBkZWNlbnRyYWxpemVkIGV4Y2hhbmdlIHBsYXRmb3JtIHRoYXQgYWxsb3dzIHVzZXJzIHRvIHRyYWRlIGFuZCBleGNoYW5nZSBkaWdpdGFsIGFzc2V0cyBzZWN1cmVseSBhbmQgdHJhbnNwYXJlbnRseS4gSXQgb2ZmZXJzIGEgdXNlci1mcmllbmRseSBpbnRlcmZhY2UgYW5kIGEgd2lkZSByYW5nZSBvZiB0cmFkaW5nIG9wdGlvbnMuPC9wPgogIDxMaXN0PgogICAgPGxpPkRlY2VudHJhbGl6ZWQgZXhjaGFuZ2UgcGxhdGZvcm0gZm9yIGluY3JlYXNlZCBzZWN1cml0eTwvbGk+CiAgICA8bGk+T2ZmZXJzIGEgd2lkZSByYW5nZSBvZiB0cmFkaW5nIG9wdGlvbnM8L2xpPgogIDwvTGlzdD4KICA8VmlzaXRCdXR0b24gaHJlZj0naHR0cHM6Ly9hcHAub3Blbm9jZWFuLmZpbmFuY2UvcmVmZXJyYWwvZEF2MDMtUm9Eb20zVXE0NHJyRVo1Wjk5bXVrU3R3YlQ0cjFDUHJPRXlBZXNoeDh0NUNCZGtZcnAwLXY3b01lYyc+VmlzaXQgT3Blbk9jZWFuIFdlYnNpdGU8L1Zpc2l0QnV0dG9uPgo8L1RvcD4KPFRvcD4KICA8VG9wVGl0cmU+PGEgaHJlZj0naHR0cHM6Ly9iaXR0cmV4LmNvbS9BY2NvdW50L1JlZ2lzdGVyP3JlZmVycmFsQ29kZT1GVEMtNFM1LVhDMycgdGFyZ2V0PXsiX2JsYW5rIn0gcmVsPSJub3JlZmVycmVyIiBjbGFzc05hbWU9J25vLXVuZGVybGluZSB0ZXh0LWJsYWNrIGZvbnQtYm9sZCc+My4gQml0dHJleDwvYT48L1RvcFRpdHJlPgogIDxwPkJpdHRyZXggaXMgYSBzZWN1cmUsIHJlbGlhYmxlLCBhbmQgYWR2YW5jZWQgZGlnaXRhbCBhc3NldCB0cmFkaW5nIHBsYXRmb3JtIHRoYXQgb2ZmZXJzIGEgd2lkZSByYW5nZSBvZiB0cmFkaW5nIG9wdGlvbnMgZm9yIGJvdGggaW5kaXZpZHVhbCBhbmQgaW5zdGl0dXRpb25hbCBpbnZlc3RvcnMuIEl0IGlzIGtub3duIGZvciBpdHMgYWR2YW5jZWQgc2VjdXJpdHkgbWVhc3VyZXMgYW5kIGZhc3QgdHJhZGUgZXhlY3V0aW9uLjwvcD4KICA8TGlzdD4KICAgIDxsaT5BZHZhbmNlZCBzZWN1cml0eSBtZWFzdXJlcyBmb3IgaW5jcmVhc2VkIHNlY3VyaXR5PC9saT4KICAgIDxsaT5GYXN0IHRyYWRlIGV4ZWN1dGlvbiBmb3IgZWZmaWNpZW50IHRyYWRpbmc8L2xpPgogIDwvTGlzdD4KICA8VmlzaXRCdXR0b24gaHJlZj0naHR0cHM6Ly9iaXR0cmV4LmNvbS9BY2NvdW50L1JlZ2lzdGVyP3JlZmVycmFsQ29kZT1GVEMtNFM1LVhDMyc+VmlzaXQgQml0dHJleCBXZWJzaXRlPC9WaXNpdEJ1dHRvbj4KPC9Ub3A+CgoKICAgIDwvPgogICkKfQoKZnVuY3Rpb24gQ29uY2x1c2lvbigpewogIHJldHVybiAoCiAgICA8PgoKCgogICAgPC8+CiAgKQp9CgoKZnVuY3Rpb24gQ29udGVudCgpIHsKICByZXR1cm4gKAogICAgPGRpdiBjbGFzc05hbWU9InJlbGF0aXZlIG92ZXJmbG93LWhpZGRlbiBiZy13aGl0ZSBweS0xNiI+CiAgICAgIDxkaXYgY2xhc3NOYW1lPSJoaWRkZW4gbGc6YWJzb2x1dGUgbGc6aW5zZXQteS0wIGxnOmJsb2NrIGxnOmgtZnVsbCBsZzp3LWZ1bGwgbGc6W292ZXJmbG93LWFuY2hvcjpub25lXSI+CiAgICAgICAgPGRpdiBjbGFzc05hbWU9InJlbGF0aXZlIG14LWF1dG8gaC1mdWxsIG1heC13LXByb3NlIHRleHQtbGciIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgIDxzdmcKICAgICAgICAgICAgY2xhc3NOYW1lPSJhYnNvbHV0ZSB0b3AtMTIgbGVmdC1mdWxsIHRyYW5zbGF0ZS14LTMyIHRyYW5zZm9ybSIKICAgICAgICAgICAgd2lkdGg9ezQwNH0KICAgICAgICAgICAgaGVpZ2h0PXszODR9CiAgICAgICAgICAgIGZpbGw9Im5vbmUiCiAgICAgICAgICAgIHZpZXdCb3g9IjAgMCA0MDQgMzg0IgogICAgICAgICAgPgogICAgICAgICAgICA8ZGVmcz4KICAgICAgICAgICAgICA8cGF0dGVybgogICAgICAgICAgICAgICAgaWQ9Ijc0YjNmZDk5LTBhNmYtNDI3MS1iZWYyLWU4MGVlYWZkZjM1NyIKICAgICAgICAgICAgICAgIHg9ezB9CiAgICAgICAgICAgICAgICB5PXswfQogICAgICAgICAgICAgICAgd2lkdGg9ezIwfQogICAgICAgICAgICAgICAgaGVpZ2h0PXsyMH0KICAgICAgICAgICAgICAgIHBhdHRlcm5Vbml0cz0idXNlclNwYWNlT25Vc2UiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPHJlY3QgeD17MH0geT17MH0gd2lkdGg9ezR9IGhlaWdodD17NH0gY2xhc3NOYW1lPSJ0ZXh0LWdyYXktMjAwIiBmaWxsPSJjdXJyZW50Q29sb3IiIC8+CiAgICAgICAgICAgICAgPC9wYXR0ZXJuPgogICAgICAgICAgICA8L2RlZnM+CiAgICAgICAgICAgIDxyZWN0IHdpZHRoPXs0MDR9IGhlaWdodD17Mzg0fSBmaWxsPSJ1cmwoIzc0YjNmZDk5LTBhNmYtNDI3MS1iZWYyLWU4MGVlYWZkZjM1NykiIC8+CiAgICAgICAgICA8L3N2Zz4KICAgICAgICAgIDxzdmcKICAgICAgICAgICAgY2xhc3NOYW1lPSJhYnNvbHV0ZSB0b3AtMS8yIHJpZ2h0LWZ1bGwgLXRyYW5zbGF0ZS15LTEvMiAtdHJhbnNsYXRlLXgtMzIgdHJhbnNmb3JtIgogICAgICAgICAgICB3aWR0aD17NDA0fQogICAgICAgICAgICBoZWlnaHQ9ezM4NH0KICAgICAgICAgICAgZmlsbD0ibm9uZSIKICAgICAgICAgICAgdmlld0JveD0iMCAwIDQwNCAzODQiCiAgICAgICAgICA+CiAgICAgICAgICAgIDxkZWZzPgogICAgICAgICAgICAgIDxwYXR0ZXJuCiAgICAgICAgICAgICAgICBpZD0iZjIxMGRiZjYtYTU4ZC00ODcxLTk2MWUtMzZkNTAxNmEwZjQ5IgogICAgICAgICAgICAgICAgeD17MH0KICAgICAgICAgICAgICAgIHk9ezB9CiAgICAgICAgICAgICAgICB3aWR0aD17MjB9CiAgICAgICAgICAgICAgICBoZWlnaHQ9ezIwfQogICAgICAgICAgICAgICAgcGF0dGVyblVuaXRzPSJ1c2VyU3BhY2VPblVzZSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8cmVjdCB4PXswfSB5PXswfSB3aWR0aD17NH0gaGVpZ2h0PXs0fSBjbGFzc05hbWU9InRleHQtZ3JheS0yMDAiIGZpbGw9ImN1cnJlbnRDb2xvciIgLz4KICAgICAgICAgICAgICA8L3BhdHRlcm4+CiAgICAgICAgICAgIDwvZGVmcz4KICAgICAgICAgICAgPHJlY3Qgd2lkdGg9ezQwNH0gaGVpZ2h0PXszODR9IGZpbGw9InVybCgjZjIxMGRiZjYtYTU4ZC00ODcxLTk2MWUtMzZkNTAxNmEwZjQ5KSIgLz4KICAgICAgICAgIDwvc3ZnPgogICAgICAgICAgPHN2ZwogICAgICAgICAgICBjbGFzc05hbWU9ImFic29sdXRlIGJvdHRvbS0xMiBsZWZ0LWZ1bGwgdHJhbnNsYXRlLXgtMzIgdHJhbnNmb3JtIgogICAgICAgICAgICB3aWR0aD17NDA0fQogICAgICAgICAgICBoZWlnaHQ9ezM4NH0KICAgICAgICAgICAgZmlsbD0ibm9uZSIKICAgICAgICAgICAgdmlld0JveD0iMCAwIDQwNCAzODQiCiAgICAgICAgICA+CiAgICAgICAgICAgIDxkZWZzPgogICAgICAgICAgICAgIDxwYXR0ZXJuCiAgICAgICAgICAgICAgICBpZD0iZDNlYjA3YWUtNTE4Mi00M2U2LTg1N2QtMzVjNjQzYWY5MDM0IgogICAgICAgICAgICAgICAgeD17MH0KICAgICAgICAgICAgICAgIHk9ezB9CiAgICAgICAgICAgICAgICB3aWR0aD17MjB9CiAgICAgICAgICAgICAgICBoZWlnaHQ9ezIwfQogICAgICAgICAgICAgICAgcGF0dGVyblVuaXRzPSJ1c2VyU3BhY2VPblVzZSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8cmVjdCB4PXswfSB5PXswfSB3aWR0aD17NH0gaGVpZ2h0PXs0fSBjbGFzc05hbWU9InRleHQtZ3JheS0yMDAiIGZpbGw9ImN1cnJlbnRDb2xvciIgLz4KICAgICAgICAgICAgICA8L3BhdHRlcm4+CiAgICAgICAgICAgIDwvZGVmcz4KICAgICAgICAgICAgPHJlY3Qgd2lkdGg9ezQwNH0gaGVpZ2h0PXszODR9IGZpbGw9InVybCgjZDNlYjA3YWUtNTE4Mi00M2U2LTg1N2QtMzVjNjQzYWY5MDM0KSIgLz4KICAgICAgICAgIDwvc3ZnPgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzc05hbWU9InJlbGF0aXZlIHB4LTQgc206cHgtNiBsZzpweC04ICI+CgoKICAgICAgICB7LyogSW50cm9kdWN0aW9uICovfQogICAgICAgIDxJbnRyb2R1Y3Rpb24gLz4KCiAgICAgICAgey8qIGNvbnRlbnUgKi99CiAgICAgICAgPGRpdiBjbGFzc05hbWU9InByb3NlIHByb3NlLWxnIHByb3NlLWluZGlnbyBteC1hdXRvIHRleHQtZ3JheS01MDAgIj4KCgogICAgICAgICAgPENvbnRlbnUgLz4KCgogICAgICAgICAgPGRpdiBjbGFzc05hbWU9J210LTIwJz4KICAgICAgICAgICAgPENvbmNsdXNpb24gLz4KICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICkKfQoKCgoKZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gSG9tZSgpIHsKICByZXR1cm4gKAogICAgPD4KICAgICAgPEhlYWQ+CiAgICAgICAgPGxpbmsgcmVsPSJpY29uIiBocmVmPXtzdGF0aWNGaWxlKCJmYXZpY29uLmljbyIpfSB0eXBlPSJpbWFnZS94LWljb24iIC8+CiAgICAgICAgPHRpdGxlPnt0aXRyZU9uZ2xldH08L3RpdGxlPgogICAgICAgIDxtZXRhIGh0dHBFcXVpdj0nQ29udGVudC1UeXBlJyBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLTgiIC8+CiAgICAgICAgPG1ldGEKICAgICAgICAgIG5hbWU9ImRlc2NyaXB0aW9uIgogICAgICAgICAgY29udGVudD17ZGVzY3JpcHRpb259CiAgICAgICAgLz4KICAgICAgPC9IZWFkPgogICAgICA8SGVhZGVyIC8+CiAgICAgIDxtYWluPgogICAgICAgIDxDb250ZW50IC8+CiAgICAgICAgPEJsb2cgLz4KICAgICAgPC9tYWluPgogICAgICA8Rm9vdGVyIC8+CiAgICA8Lz4KICApCn0KCgoKCg=="}, "top3exchanges11.jsx": {"filename": "top3exchanges11.jsx", "relpath": "src/pages/template/top/crypto/top3exchanges11.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/top/crypto/top3exchanges11.jsx", "data": ""}, "top3exchanges7.jsx": {"filename": "top3exchanges7.jsx", "relpath": "src/pages/template/top/crypto/top3exchanges7.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/top/crypto/top3exchanges7.jsx", "data": ""}, "top3exchanges8.jsx": {"filename": "top3exchanges8.jsx", "relpath": "src/pages/template/top/crypto/top3exchanges8.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/top/crypto/top3exchanges8.jsx", "data": ""}, "top3exchanges13.jsx": {"filename": "top3exchanges13.jsx", "relpath": "src/pages/template/top/crypto/top3exchanges13.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/top/crypto/top3exchanges13.jsx", "data": ""}, "top3exchanges14.jsx": {"filename": "top3exchanges14.jsx", "relpath": "src/pages/template/top/crypto/top3exchanges14.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/top/crypto/top3exchanges14.jsx", "data": ""}, "top3exchanges9.jsx": {"filename": "top3exchanges9.jsx", "relpath": "src/pages/template/top/crypto/top3exchanges9.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/top/crypto/top3exchanges9.jsx", "data": ""}, "top3exchanges3.jsx": {"filename": "top3exchanges3.jsx", "relpath": "src/pages/template/top/crypto/top3exchanges3.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/top/crypto/top3exchanges3.jsx", "data": ""}, "top3exchanges12.jsx": {"filename": "top3exchanges12.jsx", "relpath": "src/pages/template/top/crypto/top3exchanges12.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/top/crypto/top3exchanges12.jsx", "data": ""}, "top10cryptoExchanges2023.jsx": {"filename": "top10cryptoExchanges2023.jsx", "relpath": "src/pages/template/oneImage/top10cryptoExchanges2023.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/oneImage/top10cryptoExchanges2023.jsx", "data": ""}, "howtobeanattractiveman.jsx": {"filename": "howtobeanattractiveman.jsx", "relpath": "src/pages/template/advice/howtobeanattractiveman.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/advice/howtobeanattractiveman.jsx", "data": ""}, "howtotakecareofyourdog.jsx": {"filename": "howtotakecareofyourdog.jsx", "relpath": "src/pages/template/advice/howtotakecareofyourdog.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/advice/howtotakecareofyourdog.jsx", "data": ""}, "mycatdoesnotsmellgood.jsx": {"filename": "mycatdoesnotsmellgood.jsx", "relpath": "src/pages/template/advice/mycatdoesnotsmellgood.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/advice/mycatdoesnotsmellgood.jsx", "data": ""}, "mydogdoesnotsmellgood.jsx": {"filename": "mydogdoesnotsmellgood.jsx", "relpath": "src/pages/template/advice/mydogdoesnotsmellgood.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/advice/mydogdoesnotsmellgood.jsx", "data": ""}, "howtostopsweating.jsx": {"filename": "howtostopsweating.jsx", "relpath": "src/pages/template/advice/howtostopsweating.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/advice/howtostopsweating.jsx", "data": ""}, "b2.jsx": {"filename": "b2.jsx", "relpath": "src/pages/template/advice/b2.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/advice/b2.jsx", "data": ""}, "howtotakecareofyourbird.jsx": {"filename": "howtotakecareofyourbird.jsx", "relpath": "src/pages/template/advice/howtotakecareofyourbird.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/advice/howtotakecareofyourbird.jsx", "data": ""}, "howtogetridofhairdandruff.jsx": {"filename": "howtogetridofhairdandruff.jsx", "relpath": "src/pages/template/advice/howtogetridofhairdandruff.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/advice/howtogetridofhairdandruff.jsx", "data": ""}, "howtomakeyourhamsterhappy.jsx": {"filename": "howtomakeyourhamsterhappy.jsx", "relpath": "src/pages/template/advice/howtomakeyourhamsterhappy.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/advice/howtomakeyourhamsterhappy.jsx", "data": ""}, "howtobeproductive.jsx": {"filename": "howtobeproductive.jsx", "relpath": "src/pages/template/advice/howtobeproductive.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/advice/howtobeproductive.jsx", "data": ""}, "howtogetridofapimple.jsx": {"filename": "howtogetridofapimple.jsx", "relpath": "src/pages/template/advice/howtogetridofapimple.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/advice/howtogetridofapimple.jsx", "data": ""}, "howtoresurrectaplant.jsx": {"filename": "howtoresurrectaplant.jsx", "relpath": "src/pages/template/advice/howtoresurrectaplant.jsx", "abspath": "/home/alkan/Desktop/weknow/src/pages/template/advice/howtoresurrectaplant.jsx", "data": ""}}, "start_files": ["src/pages/oui.jsx", "src/pages/_app.jsx", "src/pages/index.jsx", "src/pages/register.jsx", "src/pages/_document.jsx", "src/pages/template/top/giftforkids.jsx", "src/pages/template/top/giftforpianist.jsx", "src/pages/template/top/GiftsfortheBookworm.jsx", "src/pages/template/top/giftforguitarist.jsx", "src/pages/template/top/tradingPlateform.jsx", "src/pages/template/top/giftfortech.jsx", "src/pages/template/top/ex2.jsx", "src/pages/template/top/giftforwoman.jsx", "src/pages/template/top/a.jsx", "src/pages/template/top/exchanges.jsx", "src/pages/template/top/giftforgardener.jsx", "src/pages/template/top/giftforman.jsx", "src/pages/template/top/article.jsx", "src/pages/template/top/crypto/top3exchanges10.jsx", "src/pages/template/top/crypto/top3exchanges15.jsx", "src/pages/template/top/crypto/top3exchanges6.jsx", "src/pages/template/top/crypto/top3exchanges4.jsx", "src/pages/template/top/crypto/top3exchanges5.jsx", "src/pages/template/top/crypto/top3exchanges2.jsx", "src/pages/template/top/crypto/top3exchanges0.jsx", "src/pages/template/top/crypto/top3exchanges1.jsx", "src/pages/template/top/crypto/top3exchanges11.jsx", "src/pages/template/top/crypto/top3exchanges7.jsx", "src/pages/template/top/crypto/top3exchanges8.jsx", "src/pages/template/top/crypto/top3exchanges13.jsx", "src/pages/template/top/crypto/top3exchanges14.jsx", "src/pages/template/top/crypto/top3exchanges9.jsx", "src/pages/template/top/crypto/top3exchanges3.jsx", "src/pages/template/top/crypto/top3exchanges12.jsx", "src/pages/template/oneImage/top10cryptoExchanges2023.jsx", "src/pages/template/advice/howtobeanattractiveman.jsx", "src/pages/template/advice/howtotakecareofyourdog.jsx", "src/pages/template/advice/mycatdoesnotsmellgood.jsx", "src/pages/template/advice/mydogdoesnotsmellgood.jsx", "src/pages/template/advice/howtostopsweating.jsx", "src/pages/template/advice/b2.jsx", "src/pages/template/advice/howtotakecareofyourbird.jsx", "src/pages/template/advice/howtogetridofhairdandruff.jsx", "src/pages/template/advice/howtomakeyourhamsterhappy.jsx", "src/pages/template/advice/howtobeproductive.jsx", "src/pages/template/advice/howtogetridofapimple.jsx", "src/pages/template/advice/howtoresurrectaplant.jsx"]}