aW1wb3J0ICdmb2N1cy12aXNpYmxlJwppbXBvcnQgJ0Avc3R5bGVzL3RhaWx3aW5kLmNzcycKCmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEFwcCh7IENvbXBvbmVudCwgcGFnZVByb3BzIH0pIHsKICByZXR1cm4gPENvbXBvbmVudCB7Li4ucGFnZVByb3BzfSAvPgp9Cg==/***s***/aW1wb3J0IEhlYWQgZnJvbSAnbmV4dC9oZWFkJwoKaW1wb3J0IHsgQ2FsbFRvQWN0aW9uIH0gZnJvbSAnQC9jb21wb25lbnRzL0NhbGxUb0FjdGlvbicKaW1wb3J0IHsgRmFxcyB9IGZyb20gJ0AvY29tcG9uZW50cy9GYXFzJwppbXBvcnQgeyBGb290ZXIgfSBmcm9tICdAL2NvbXBvbmVudHMvRm9vdGVyJwppbXBvcnQgeyBIZWFkZXIgfSBmcm9tICdAL2NvbXBvbmVudHMvSGVhZGVyJwppbXBvcnQgeyBCbG9nIH0gZnJvbSAnQC9jb21wb25lbnRzL0Jsb2cnCmltcG9ydCB7IFVzZXJIZWFkZXIgfSBmcm9tICdAL2NvbXBvbmVudHMvVXNlckhlYWRlcicKCmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEhvbWUoKSB7CiAgcmV0dXJuICgKICAgIDw+CiAgICAgIDxIZWFkPgogICAgICAgIDx0aXRsZT5UYXhQYWwgLSBBY2NvdW50aW5nIG1hZGUgc2ltcGxlIGZvciBzbWFsbCBidXNpbmVzc2VzPC90aXRsZT4KICAgICAgICA8bWV0YQogICAgICAgICAgbmFtZT0iZGVzY3JpcHRpb24iCiAgICAgICAgICBjb250ZW50PSJNb3N0IGJvb2trZWVwaW5nIHNvZnR3YXJlIGlzIGFjY3VyYXRlLCBidXQgaGFyZCB0byB1c2UuIFdlIG1ha2UgdGhlIG9wcG9zaXRlIHRyYWRlLW9mZiwgYW5kIGhvcGUgeW91IGRvbuKAmXQgZ2V0IGF1ZGl0ZWQuIgogICAgICAgIC8+CiAgICAgIDwvSGVhZD4KICAgICAgPEhlYWRlciAvPgogICAgICA8bWFpbj4KICAgICAgICA8QmxvZyAvPgogICAgICA8L21haW4+CiAgICAgIDxGb290ZXIgLz4KICAgIDwvPgogICkKfQo=/***s***/aW1wb3J0IEhlYWQgZnJvbSAnbmV4dC9oZWFkJwppbXBvcnQgTGluayBmcm9tICduZXh0L2xpbmsnCgppbXBvcnQgeyBBdXRoTGF5b3V0IH0gZnJvbSAnQC9jb21wb25lbnRzL0F1dGhMYXlvdXQnCmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gJ0AvY29tcG9uZW50cy9CdXR0b24nCmltcG9ydCB7IFRleHRGaWVsZCB9IGZyb20gJ0AvY29tcG9uZW50cy9GaWVsZHMnCmltcG9ydCB7IExvZ28gfSBmcm9tICdAL2NvbXBvbmVudHMvTG9nbycKCmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIExvZ2luKCkgewogIHJldHVybiAoCiAgICA8PgogICAgICA8SGVhZD4KICAgICAgICA8dGl0bGU+U2lnbiBJbiAtIFRheFBhbDwvdGl0bGU+CiAgICAgIDwvSGVhZD4KICAgICAgPEF1dGhMYXlvdXQ+CiAgICAgICAgPGRpdiBjbGFzc05hbWU9ImZsZXggZmxleC1jb2wiPgogICAgICAgICAgPExpbmsgaHJlZj0iLyIgYXJpYS1sYWJlbD0iSG9tZSI+CiAgICAgICAgICAgIDxMb2dvIGNsYXNzTmFtZT0iaC0xMCB3LWF1dG8iIC8+CiAgICAgICAgICA8L0xpbms+CiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ibXQtMjAiPgogICAgICAgICAgICA8aDIgY2xhc3NOYW1lPSJ0ZXh0LWxnIGZvbnQtc2VtaWJvbGQgdGV4dC1ncmF5LTkwMCI+CiAgICAgICAgICAgICAgU2lnbiBpbiB0byB5b3VyIGFjY291bnQKICAgICAgICAgICAgPC9oMj4KICAgICAgICAgICAgPHAgY2xhc3NOYW1lPSJtdC0yIHRleHQtc20gdGV4dC1ncmF5LTcwMCI+CiAgICAgICAgICAgICAgRG9u4oCZdCBoYXZlIGFuIGFjY291bnQ/eycgJ30KICAgICAgICAgICAgICA8TGluawogICAgICAgICAgICAgICAgaHJlZj0iL3JlZ2lzdGVyIgogICAgICAgICAgICAgICAgY2xhc3NOYW1lPSJmb250LW1lZGl1bSB0ZXh0LWJsdWUtNjAwIGhvdmVyOnVuZGVybGluZSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBTaWduIHVwCiAgICAgICAgICAgICAgPC9MaW5rPnsnICd9CiAgICAgICAgICAgICAgZm9yIGEgZnJlZSB0cmlhbAogICAgICAgICAgICA8L3A+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8Zm9ybSBhY3Rpb249IiMiIGNsYXNzTmFtZT0ibXQtMTAgZ3JpZCBncmlkLWNvbHMtMSBnYXAteS04Ij4KICAgICAgICAgIDxUZXh0RmllbGQKICAgICAgICAgICAgbGFiZWw9IkVtYWlsIGFkZHJlc3MiCiAgICAgICAgICAgIGlkPSJlbWFpbCIKICAgICAgICAgICAgbmFtZT0iZW1haWwiCiAgICAgICAgICAgIHR5cGU9ImVtYWlsIgogICAgICAgICAgICBhdXRvQ29tcGxldGU9ImVtYWlsIgogICAgICAgICAgICByZXF1aXJlZAogICAgICAgICAgLz4KICAgICAgICAgIDxUZXh0RmllbGQKICAgICAgICAgICAgbGFiZWw9IlBhc3N3b3JkIgogICAgICAgICAgICBpZD0icGFzc3dvcmQiCiAgICAgICAgICAgIG5hbWU9InBhc3N3b3JkIgogICAgICAgICAgICB0eXBlPSJwYXNzd29yZCIKICAgICAgICAgICAgYXV0b0NvbXBsZXRlPSJjdXJyZW50LXBhc3N3b3JkIgogICAgICAgICAgICByZXF1aXJlZAogICAgICAgICAgLz4KICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgIDxCdXR0b24KICAgICAgICAgICAgICB0eXBlPSJzdWJtaXQiCiAgICAgICAgICAgICAgdmFyaWFudD0ic29saWQiCiAgICAgICAgICAgICAgY29sb3I9ImJsdWUiCiAgICAgICAgICAgICAgY2xhc3NOYW1lPSJ3LWZ1bGwiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8c3Bhbj4KICAgICAgICAgICAgICAgIFNpZ24gaW4gPHNwYW4gYXJpYS1oaWRkZW49InRydWUiPiZyYXJyOzwvc3Bhbj4KICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvQnV0dG9uPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9mb3JtPgogICAgICA8L0F1dGhMYXlvdXQ+CiAgICA8Lz4KICApCn0K/***s***/aW1wb3J0IEhlYWQgZnJvbSAnbmV4dC9oZWFkJwppbXBvcnQgTGluayBmcm9tICduZXh0L2xpbmsnCgppbXBvcnQgeyBBdXRoTGF5b3V0IH0gZnJvbSAnQC9jb21wb25lbnRzL0F1dGhMYXlvdXQnCmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gJ0AvY29tcG9uZW50cy9CdXR0b24nCmltcG9ydCB7IFNlbGVjdEZpZWxkLCBUZXh0RmllbGQgfSBmcm9tICdAL2NvbXBvbmVudHMvRmllbGRzJwppbXBvcnQgeyBMb2dvIH0gZnJvbSAnQC9jb21wb25lbnRzL0xvZ28nCgpleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBSZWdpc3RlcigpIHsKICByZXR1cm4gKAogICAgPD4KICAgICAgPEhlYWQ+CiAgICAgICAgPHRpdGxlPlNpZ24gVXAgLSBUYXhQYWw8L3RpdGxlPgogICAgICA8L0hlYWQ+CiAgICAgIDxBdXRoTGF5b3V0PgogICAgICAgIDxkaXYgY2xhc3NOYW1lPSJmbGV4IGZsZXgtY29sIj4KICAgICAgICAgIDxMaW5rIGhyZWY9Ii8iIGFyaWEtbGFiZWw9IkhvbWUiPgogICAgICAgICAgICA8TG9nbyBjbGFzc05hbWU9ImgtMTAgdy1hdXRvIiAvPgogICAgICAgICAgPC9MaW5rPgogICAgICAgICAgPGRpdiBjbGFzc05hbWU9Im10LTIwIj4KICAgICAgICAgICAgPGgyIGNsYXNzTmFtZT0idGV4dC1sZyBmb250LXNlbWlib2xkIHRleHQtZ3JheS05MDAiPgogICAgICAgICAgICAgIEdldCBzdGFydGVkIGZvciBmcmVlCiAgICAgICAgICAgIDwvaDI+CiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT0ibXQtMiB0ZXh0LXNtIHRleHQtZ3JheS03MDAiPgogICAgICAgICAgICAgIEFscmVhZHkgcmVnaXN0ZXJlZD97JyAnfQogICAgICAgICAgICAgIDxMaW5rCiAgICAgICAgICAgICAgICBocmVmPSIvbG9naW4iCiAgICAgICAgICAgICAgICBjbGFzc05hbWU9ImZvbnQtbWVkaXVtIHRleHQtYmx1ZS02MDAgaG92ZXI6dW5kZXJsaW5lIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIFNpZ24gaW4KICAgICAgICAgICAgICA8L0xpbms+eycgJ30KICAgICAgICAgICAgICB0byB5b3VyIGFjY291bnQuCiAgICAgICAgICAgIDwvcD4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxmb3JtCiAgICAgICAgICBhY3Rpb249IiMiCiAgICAgICAgICBjbGFzc05hbWU9Im10LTEwIGdyaWQgZ3JpZC1jb2xzLTEgZ2FwLXktOCBnYXAteC02IHNtOmdyaWQtY29scy0yIgogICAgICAgID4KICAgICAgICAgIDxUZXh0RmllbGQKICAgICAgICAgICAgbGFiZWw9IkZpcnN0IG5hbWUiCiAgICAgICAgICAgIGlkPSJmaXJzdF9uYW1lIgogICAgICAgICAgICBuYW1lPSJmaXJzdF9uYW1lIgogICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICBhdXRvQ29tcGxldGU9ImdpdmVuLW5hbWUiCiAgICAgICAgICAgIHJlcXVpcmVkCiAgICAgICAgICAvPgogICAgICAgICAgPFRleHRGaWVsZAogICAgICAgICAgICBsYWJlbD0iTGFzdCBuYW1lIgogICAgICAgICAgICBpZD0ibGFzdF9uYW1lIgogICAgICAgICAgICBuYW1lPSJsYXN0X25hbWUiCiAgICAgICAgICAgIHR5cGU9InRleHQiCiAgICAgICAgICAgIGF1dG9Db21wbGV0ZT0iZmFtaWx5LW5hbWUiCiAgICAgICAgICAgIHJlcXVpcmVkCiAgICAgICAgICAvPgogICAgICAgICAgPFRleHRGaWVsZAogICAgICAgICAgICBjbGFzc05hbWU9ImNvbC1zcGFuLWZ1bGwiCiAgICAgICAgICAgIGxhYmVsPSJFbWFpbCBhZGRyZXNzIgogICAgICAgICAgICBpZD0iZW1haWwiCiAgICAgICAgICAgIG5hbWU9ImVtYWlsIgogICAgICAgICAgICB0eXBlPSJlbWFpbCIKICAgICAgICAgICAgYXV0b0NvbXBsZXRlPSJlbWFpbCIKICAgICAgICAgICAgcmVxdWlyZWQKICAgICAgICAgIC8+CiAgICAgICAgICA8VGV4dEZpZWxkCiAgICAgICAgICAgIGNsYXNzTmFtZT0iY29sLXNwYW4tZnVsbCIKICAgICAgICAgICAgbGFiZWw9IlBhc3N3b3JkIgogICAgICAgICAgICBpZD0icGFzc3dvcmQiCiAgICAgICAgICAgIG5hbWU9InBhc3N3b3JkIgogICAgICAgICAgICB0eXBlPSJwYXNzd29yZCIKICAgICAgICAgICAgYXV0b0NvbXBsZXRlPSJuZXctcGFzc3dvcmQiCiAgICAgICAgICAgIHJlcXVpcmVkCiAgICAgICAgICAvPgogICAgICAgICAgPFNlbGVjdEZpZWxkCiAgICAgICAgICAgIGNsYXNzTmFtZT0iY29sLXNwYW4tZnVsbCIKICAgICAgICAgICAgbGFiZWw9IkhvdyBkaWQgeW91IGhlYXIgYWJvdXQgdXM/IgogICAgICAgICAgICBpZD0icmVmZXJyYWxfc291cmNlIgogICAgICAgICAgICBuYW1lPSJyZWZlcnJhbF9zb3VyY2UiCiAgICAgICAgICA+CiAgICAgICAgICAgIDxvcHRpb24+QWx0YVZpc3RhIHNlYXJjaDwvb3B0aW9uPgogICAgICAgICAgICA8b3B0aW9uPlN1cGVyIEJvd2wgY29tbWVyY2lhbDwvb3B0aW9uPgogICAgICAgICAgICA8b3B0aW9uPk91ciByb3V0ZSAzNCBjaXR5IGJ1cyBhZDwvb3B0aW9uPgogICAgICAgICAgICA8b3B0aW9uPlRoZSDigJxOZXZlciBVc2UgVGhpc+KAnSBwb2RjYXN0PC9vcHRpb24+CiAgICAgICAgICA8L1NlbGVjdEZpZWxkPgogICAgICAgICAgPGRpdiBjbGFzc05hbWU9ImNvbC1zcGFuLWZ1bGwiPgogICAgICAgICAgICA8QnV0dG9uCiAgICAgICAgICAgICAgdHlwZT0ic3VibWl0IgogICAgICAgICAgICAgIHZhcmlhbnQ9InNvbGlkIgogICAgICAgICAgICAgIGNvbG9yPSJibHVlIgogICAgICAgICAgICAgIGNsYXNzTmFtZT0idy1mdWxsIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPHNwYW4+CiAgICAgICAgICAgICAgICBTaWduIHVwIDxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj4mcmFycjs8L3NwYW4+CiAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICA8L0J1dHRvbj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZm9ybT4KICAgICAgPC9BdXRoTGF5b3V0PgogICAgPC8+CiAgKQp9Cg==/***s***/aW1wb3J0IHsgSGVhZCwgSHRtbCwgTWFpbiwgTmV4dFNjcmlwdCB9IGZyb20gJ25leHQvZG9jdW1lbnQnCgpleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBEb2N1bWVudChwcm9wcykgewogIGxldCBwYWdlUHJvcHMgPSBwcm9wcy5fX05FWFRfREFUQV9fPy5wcm9wcz8ucGFnZVByb3BzCgogIHJldHVybiAoCiAgICA8SHRtbAogICAgICBjbGFzc05hbWU9ImgtZnVsbCBzY3JvbGwtc21vb3RoIGJnLXdoaXRlIGFudGlhbGlhc2VkIFtmb250LWZlYXR1cmUtc2V0dGluZ3M6J3NzMDEnXSIKICAgICAgbGFuZz0iZW4iCiAgICA+CiAgICAgIDxIZWFkPgogICAgICAgIDxsaW5rIHJlbD0icHJlY29ubmVjdCIgaHJlZj0iaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbSIgLz4KICAgICAgICA8bGluawogICAgICAgICAgcmVsPSJwcmVjb25uZWN0IgogICAgICAgICAgaHJlZj0iaHR0cHM6Ly9mb250cy5nc3RhdGljLmNvbSIKICAgICAgICAgIGNyb3NzT3JpZ2luPSJhbm9ueW1vdXMiCiAgICAgICAgLz4KICAgICAgICA8bGluawogICAgICAgICAgcmVsPSJzdHlsZXNoZWV0IgogICAgICAgICAgaHJlZj0iaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1JbnRlcjp3Z2h0QDEwMC4uOTAwJmZhbWlseT1MZXhlbmQ6d2dodEA0MDA7NTAwJmRpc3BsYXk9c3dhcCIKICAgICAgICAvPgogICAgICA8L0hlYWQ+CiAgICAgIDxib2R5IGNsYXNzTmFtZT0iZmxleCBoLWZ1bGwgZmxleC1jb2wiPgogICAgICAgIDxNYWluIC8+CiAgICAgICAgPE5leHRTY3JpcHQgLz4KICAgICAgPC9ib2R5PgogICAgPC9IdG1sPgogICkKfQo=/***s******s***/***s***/***s***/***s******s***/***s******s***/***s***/Ly8gYSBjaGFuZ2VyICEKY29uc3QgdGl0cmVPbmdsZXQgPSAiNSBnaWZ0cyB0byBnaXZlIHRvIGEgbWFuIgpjb25zdCBkZXNjcmlwdGlvbiA9ICJJdCBpcyBhbHdheXMgaGFyZCB0byBmaW5kIGEgZ2lmdCBmb3IgeW91ciBodXNiYW5kIHlvdXIgZGFkIG9yIHlvdXIgc29uLiBIZXJlcyAxMCBnaWZ0cyBob3cgd2lsbCBiZSBhbHdheXMgYmUgYXBwcmVjaWF0ZWQgYnkgYSBtYW4gIgoKY29uc3Qgc3VqZXQgPSAiZ2lmdHMiCmNvbnN0IHRpdHJlID0gIjUgZ2lmdHMgdG8gZ2l2ZSB0byBhIG1hbiIKCgoKaW1wb3J0IHsgSW1nIH0gZnJvbSAnQC9jb21wb25lbnRzL2Jsb2cvSW1nJwppbXBvcnQgeyBJbWFnZXNHcmlkIH0gZnJvbSAnQC9jb21wb25lbnRzL2Jsb2cvSW1hZ2VzR3JpZCcKaW1wb3J0IEhlYWQgZnJvbSAnbmV4dC9oZWFkJwppbXBvcnQgeyBOZXdzbGV0dGVyIH0gZnJvbSAnQC9jb21wb25lbnRzL05ld3NsZXR0ZXInCmltcG9ydCB7IExvZ28gfSBmcm9tICdAL2ltYWdlcy9sb2dvLnN2ZycKaW1wb3J0IHsgRm9vdGVyIH0gZnJvbSAnQC9jb21wb25lbnRzL0Zvb3RlcicKaW1wb3J0IHsgSGVhZGVyIH0gZnJvbSAnQC9jb21wb25lbnRzL0hlYWRlcicKaW1wb3J0IHsgQmxvZyB9IGZyb20gJ0AvY29tcG9uZW50cy9CbG9nJwppbXBvcnQgeyBUb3AgfSBmcm9tICdAL2NvbXBvbmVudHMvYmxvZy9Ub3AnCmltcG9ydCB7IFRvcFRpdHJlIH0gZnJvbSAnQC9jb21wb25lbnRzL2Jsb2cvVG9wVGl0cmUnCmltcG9ydCB7IExpc3QgfSBmcm9tICdAL2NvbXBvbmVudHMvYmxvZy9MaXN0JwoKaW1wb3J0IHsgVXNlckhlYWRlciB9IGZyb20gJ0AvY29tcG9uZW50cy9Vc2VySGVhZGVyJwoKaW1wb3J0IHsgSW50cm9kdWN0aW9uVGV4dCB9IGZyb20gJ0AvY29tcG9uZW50cy9ibG9nL0ludHJvZHVjdGlvblRleHQnCmltcG9ydCB7IFN1amV0IH0gZnJvbSAnQC9jb21wb25lbnRzL2Jsb2cvU3VqZXQnCmltcG9ydCB7IFRpdHJlIH0gZnJvbSAnQC9jb21wb25lbnRzL2Jsb2cvVGl0cmUnCgpjb25zdCBjb2xvciA9ICJ0ZXh0LWluZGlnby02MDAiCgoKZnVuY3Rpb24gSW50cm9kdWN0aW9uKCl7CiAgcmV0dXJuICgKICAgIDw+CiAgICAgIDxkaXYgY2xhc3NOYW1lPSJteC1hdXRvIG1heC13LXByb3NlIHRleHQtbGcgZmxleCBmbGV4LWNvbCBpdGVtcy1jZW50ZXIiPgogICAgICAgIDxVc2VySGVhZGVyIC8+CiAgICAgICAgCiAgICAgICAgPFN1amV0IGNsYXNzTmFtZT17Y29sb3J9PntzdWpldH08L1N1amV0PgogICAgICAgIDxUaXRyZT57dGl0cmV9PC9UaXRyZT4KICAgICAgCiAgICAgICAgPEludHJvZHVjdGlvblRleHQ+SXQgaXMgYWx3YXlzIGhhcmQgdG8gZmluZCBhIGdpZnQgZm9yIHlvdXIgaHVzYmFuZCB5b3VyIGRhZCBvciB5b3VyIHNvbi4gSGVyZXMgMTAgZ2lmdHMgaG93IHdpbGwgYmUgYWx3YXlzIGJlIGFwcHJlY2lhdGVkIGJ5IGEgbWFuPC9JbnRyb2R1Y3Rpb25UZXh0PgogICAgICA8L2Rpdj4KICAgIDwvPgogICkKfQoKZnVuY3Rpb24gQ29udGVudSgpewogIHJldHVybiAoCiAgICA8PgogICAgICA8VG9wPgogICAgICAgICAgPFRvcFRpdHJlPjEud2F0Y2hlczwvVG9wVGl0cmU+CiAgICAgICAgICA8cD4KICAgICAgICAgIFdhdGNoZXMgaGF2ZSBsb25nIGJlZW4gYSBzdGFwbGUgYWNjZXNzb3J5IGZvciBtZW4sIHNlcnZpbmcgbm90IG9ubHkgYXMgYSBwcmFjdGljYWwgdG9vbCBmb3Iga2VlcGluZyB0cmFjayBvZiB0aW1lLCBidXQgYWxzbyBhcyBhIGZhc2hpb24gc3RhdGVtZW50IGFuZCBzeW1ib2wgb2Ygc3RhdHVzLklmIGhlIGFscmVhZHkgaGFzIG9uZSBpdCBpcyBzdGlsbCBhIGdvb2QgZ2lmdCBiZWNhdXNlIHdhdGNoZXMgZm9yIG1hbiBhcmUgbGlrZSBiYWcgZm9yIHdvbWVuIHdlIGxvdmUgaGF2aW5nIGEgbG90IG9mIHRoZW0ueycgJ30KICAgICAgICAgIDwvcD4KICAgICAgICAgIDxkaXY+CiAgICAgICAgICBIZXJlIGFyZSBzb21lIHdhdGNoZXMgdGhhdCBtZW4gb2Z0ZW4gbGlrZS4KICAgICAgICAgIDxJbWFnZXNHcmlkIGNvbD17NH0gcm93PXsxfSBnYXA9ezN9PgogICAgICAgICAgICA8SW1nIHRleHQ9eyJBVVRPTUFUSUMgTEFWQVJFRE8ifSBzcmM9eyJodHRwczovL20ubWVkaWEtYW1hem9uLmNvbS9pbWFnZXMvSS84MSs5SmRTN1VOTC5fQUNfU1gzNDJfLmpwZyJ9IGhyZWY9eyJodHRwczovL2Ftem4udG8vM0cxSTNNTiJ9IC8+CiAgICAgICAgICAgIDxJbWcgdGV4dD17IkJFTllBUiJ9IHNyYz17Imh0dHBzOi8vbS5tZWRpYS1hbWF6b24uY29tL2ltYWdlcy9JLzYxWEVnM25iSnVMLl9BQ19TWDM0Ml8uanBnIn0gaHJlZj17Imh0dHBzOi8vYW16bi50by8zVzVYRm5YIn0gLz4KICAgICAgICAgICAgPEltZyB0ZXh0PXsiRW1wb3JpbyBBcm1hbmkifSBzcmM9eyJodHRwczovL20ubWVkaWEtYW1hem9uLmNvbS9pbWFnZXMvSS82MUZ3dHZ6bloxTC5fQUNfU1gzNDJfLmpwZyJ9IGhyZWY9eyJodHRwczovL2Ftem4udG8vM1c1WEZuWCJ9IC8+CiAgICAgICAgICAgIDxJbWcgdGV4dD17IklERUFMUk9ZQUwifSBzcmM9eyJodHRwczovL20ubWVkaWEtYW1hem9uLmNvbS9pbWFnZXMvSS82MWg1akx0dU9WTC5fQUNfU0wxNTAwXy5qcGcifSBocmVmPXsiaHR0cHM6Ly9hbXpuLnRvLzNHMEpzVEYifSAvPgogICAgICAgICAgPC9JbWFnZXNHcmlkPgogICAgICAgICAgPC9kaXY+CiAgICAgIDwvVG9wPgoKICAgICAgPFRvcD4KICAgICAgICAgIDxUb3BUaXRyZT4yLnBhcmZ1bWU8L1RvcFRpdHJlPgoKICAgICAgICAgIDxwPgogICAgICAgICAgUGVyZnVtZSwgb3IgY29sb2duZSwgY2FuIGJlIGFuIGltcG9ydGFudCBhY2Nlc3NvcnkgZm9yIG1lbiBmb3IgYSBudW1iZXIgb2YgcmVhc29ucy4gSGVyZSBhcmUgYSBmZXc6CiAgICAgICAgICA8L3A+CiAgICAgICAgICA8TGlzdD4KICAgICAgICAgICAgPGxpPlBlcnNvbmFsIGdyb29taW5nOiBQZXJmdW1lIGNhbiBiZSB1c2VkIHRvIGhlbHAgbWVuIGZlZWwgY2xlYW4gYW5kIHJlZnJlc2hlZCwgYW5kIGNhbiBiZSBhIHBhcnQgb2YgdGhlaXIgZGFpbHkgZ3Jvb21pbmcgcm91dGluZS48L2xpPgogICAgICAgICAgICA8bGk+SW1wcmVzc2lvbjogUGVyZnVtZSBjYW4gbWFrZSBhIHBvc2l0aXZlIGltcHJlc3Npb24gb24gb3RoZXJzIGFuZCBtYXkgYmUgdmlld2VkIGFzIGEgc2lnbiBvZiBzb3BoaXN0aWNhdGlvbiBhbmQgYXR0ZW50aW9uIHRvIGRldGFpbC48L2xpPgogICAgICAgICAgICA8bGk+TW9vZCBhbmQgd2VsbC1iZWluZzogU29tZSBwZW9wbGUgYmVsaWV2ZSB0aGF0IGNlcnRhaW4gc2NlbnRzIGNhbiBoYXZlIGFuIGVmZmVjdCBvbiBtb29kIGFuZCB3ZWxsLWJlaW5nLCBhbmQgbWF5IGNob29zZSB0byB3ZWFyIGEgcGFydGljdWxhciBwZXJmdW1lIGZvciB0aGlzIHJlYXNvbi48L2xpPgogICAgICAgICAgPC9MaXN0PgogICAgICAgICAgPHA+bWVuIGxvdmUgdG8gaGF2ZSBhIG11bHRpdHVkZSBvZiBwZXJmdW1lcyB0byBjaGFuZ2UgYWNjb3JkaW5nIHRvIHRoZWlyIG1vb2Qgc28gZG9uJ3QgYmUgYWZyYWlkIHRvIGJ1eSBoaW0gc29tZSBldmVuIGlmIGhlIGFscmVhZHkgaGFzIG9uZSA8L3A+CiAgICAgICAgICA8SW1hZ2VzR3JpZCBjb2w9ezJ9IHJvdz17MX0gZ2FwPXs0fT4KICAgICAgICAgICAgPEltZyB0ZXh0PXsiQXp6YXJvIEZvciBNZW4ifSBzcmM9eyJodHRwczovL20ubWVkaWEtYW1hem9uLmNvbS9pbWFnZXMvSS83MUl1M1hOUklYTC5fQUNfU0wxNTAwXy5qcGcifSBocmVmPXsiaHR0cHM6Ly9hbXpuLnRvLzNqMzdkbDAifSAvPgogICAgICAgICAgICA8SW1nIHRleHQ9eyJEaW9yIFNhdXZhZ2UifSBzcmM9eyJodHRwczovL20ubWVkaWEtYW1hem9uLmNvbS9pbWFnZXMvSS83MWVjalNKYTFvUy5fQUNfU0wxNTAwXy5qcGcifSBocmVmPXsiaHR0cHM6Ly9hbXpuLnRvLzNHMEtuVTcifSAvPgogICAgICAgICAgICA8SW1nIHRleHQ9eyJJbnZpY3R1cyBQYWNvIFJhYmFubmUifSBzcmM9eyJodHRwczovL20ubWVkaWEtYW1hem9uLmNvbS9pbWFnZXMvSS80MVpjVmVXWmtlTC5fQUNfLmpwZyJ9IGhyZWY9eyJodHRwczovL2Ftem4udG8vM2oyQm1SdSJ9IC8+CiAgICAgICAgICAgIDxJbWcgdGV4dD17IkF1dG9tYXRpYyBMYXZhcmVkbyJ9IHNyYz17Imh0dHBzOi8vbS5tZWRpYS1hbWF6b24uY29tL2ltYWdlcy9JLzcxei1HdzUzTWFMLl9BQ19TTDE1MDBfLmpwZyJ9IGhyZWY9eyJodHRwczovL2Ftem4udG8vM1l3N2c5bCJ9IC8+CiAgICAgICAgICA8L0ltYWdlc0dyaWQ+CiAgICAgIDwvVG9wPgoKICAgICAgPFRvcD4KICAgICAgICAgIDxUb3BUaXRyZT4zLmNhcmRob2xkZXI8L1RvcFRpdHJlPgogICAgICAgICAgCiAgICAgICAgICA8cD4KICAgICAgICAgIGNhcmRob2xkZXJzIGFyZSBhIGdyZWF0IGdpZnQgZm9yIG1lbiBiZWNhdXNlIHRoZXkgYXJlIHByYWN0aWNhbCwgc3R5bGlzaCwgZHVyYWJsZSwgYW5kIHZlcnNhdGlsZS4gVGhleSBwcm92aWRlIGEgY29udmVuaWVudCB3YXkgdG8ga2VlcCBjYXJkcyBvcmdhbml6ZWQgYW5kIGNhbiBiZSB1c2VkIGZvciBhIHdpZGUgcmFuZ2Ugb2YgcHVycG9zZXMueycgJ30KICAgICAgICAgIDwvcD4KICAgICAgICAgIDxJbWFnZXNHcmlkIGNvbD17NH0gcm93PXsxfSBnYXA9ezJ9PgogICAgICAgICAgICA8SW1nIHRleHQ9eyJUb21teSBIaWxmaWdlciJ9IHNyYz17Imh0dHBzOi8vbS5tZWRpYS1hbWF6b24uY29tL2ltYWdlcy9JLzkxWW1JejV3SFlMLl9BQ19TTDE1MDBfLmpwZyJ9IGhyZWY9eyJodHRwczovL2Ftem4udG8vM1BCcHY5aSJ9IC8+CiAgICAgICAgICAgIDxJbWcgdGV4dD17IlZ1bGtpdCJ9IHNyYz17Imh0dHBzOi8vbS5tZWRpYS1hbWF6b24uY29tL2ltYWdlcy9JLzcxSHJFU2JaNzBMLl9BQ19TTDE1MDBfLmpwZyJ9IGhyZWY9eyJodHRwczovL2Ftem4udG8vM1dtbUgxTyJ9IC8+CiAgICAgICAgICAgIDxJbWcgdGV4dD17IlBlcmZvcm1hbnRlIn0gc3JjPXsiaHR0cHM6Ly9tLm1lZGlhLWFtYXpvbi5jb20vaW1hZ2VzL0kvNTE5OU9reGw0N0wuX0FDX1NMMTAyNF8uanBnIn0gaHJlZj17Imh0dHBzOi8vYW16bi50by8zdVkxYVJKIn0gLz4KICAgICAgICAgICAgPEltZyB0ZXh0PXsiTmFuaW5tb28ifSBzcmM9eyJodHRwczovL20ubWVkaWEtYW1hem9uLmNvbS9pbWFnZXMvSS83MWVvbENVLWtGTC5fQUNfU0wxNTAwXy5qcGcifSBocmVmPXsiaHR0cHM6Ly9hbXpuLnRvLzNoeXpUQzYifSAvPgogICAgICAgICAgPC9JbWFnZXNHcmlkPgogICAgICA8L1RvcD4KICAgICAgPFRvcD4KICAgICAgICAgIDxUb3BUaXRyZT40LmNhciBhY2Nlc3NvcmllczwvVG9wVGl0cmU+CgogICAgICAgICAgPHA+CiAgICAgICAgICBjYXIgYWNjZXNzb3JpZXMgY2FuIG1ha2UgZ29vZCBnaWZ0cyBmb3IgbWVuIGJlY2F1c2UgdGhleSBjYW4gYmUgYm90aCBwcmFjdGljYWwgYW5kIGVuam95YWJsZS4gVGhleSBjYW4gaGVscCB0byBrZWVwIGEgY2FyIGNsZWFuIGFuZCBvcmdhbml6ZWQsIGFsbG93IG1lbiB0byBwZXJzb25hbGl6ZSB0aGVpciBjYXIsIHByb3ZpZGUgZW50ZXJ0YWlubWVudCwgYW5kIGltcHJvdmUgc2FmZXR5eycgJ30KICAgICAgICAgIDwvcD4KICAgICAgICAgIDxJbWFnZXNHcmlkIGNvbD17NH0gcm93PXsxfSBnYXA9ezN9PgogICAgICAgICAgICA8SW1nIHRleHQ9eyJQSE9ORSBIT0xERVIifSBzcmM9eyJodHRwczovL20ubWVkaWEtYW1hem9uLmNvbS9pbWFnZXMvSS83MWpjZ0E3aUhBTC5fQUNfU0wxNTAwXy5qcGcifSBocmVmPXsiaHR0cHM6Ly9hbXpuLnRvLzN2MERVNXUifSAvPgogICAgICAgICAgICA8SW1nIHRleHQ9eyJsZWQgZm9yIGNhciJ9IHNyYz17Imh0dHBzOi8vbS5tZWRpYS1hbWF6b24uY29tL2ltYWdlcy9JLzYxaW1jSFB2QlRMLl9BQ19TTDEwMDBfLmpwZyJ9IGhyZWY9eyJodHRwczovL2Ftem4udG8vM1c2MEozbiJ9IC8+CiAgICAgICAgICAgIDxJbWcgdGV4dD17IkJsdWV0b290aCBDYXIgRk0gVHJhbnNtaXR0ZXIifSBzcmM9eyJodHRwczovL20ubWVkaWEtYW1hem9uLmNvbS9pbWFnZXMvSS82MVZPdkN1LXJ1TC5fQUNfU0wxMDc3Xy5qcGcifSBocmVmPXsiaHR0cHM6Ly9hbXpuLnRvLzNISllEU3UifSAvPgogICAgICAgICAgICA8SW1nIHRleHQ9eyJkYXNoIGNhbSJ9IHNyYz17Imh0dHBzOi8vbS5tZWRpYS1hbWF6b24uY29tL2ltYWdlcy9JLzgxRnA1VU1GZC1MLl9BQ19TTDE1MDBfLmpwZyJ9IGhyZWY9eyJodHRwczovL2Ftem4udG8vM2hCczJEVyJ9IC8+CiAgICAgICAgICA8L0ltYWdlc0dyaWQ+CiAgICAgIDwvVG9wPgogICAgICA8VG9wPgogICAgICAgICAgPFRvcFRpdHJlPjUuYnVzaW5lc3MgY2FzZTwvVG9wVGl0cmU+CgogICAgICAgICAgPHA+CiAgICAgICAgICBsYXB0b3AgY2FzZXMgY2FuIGJlIGdvb2QgZ2lmdHMgZm9yIG1lbiBiZWNhdXNlIHRoZXkgY2FuIGhlbHAgdG8gcHJvdGVjdCBhIGxhcHRvcCwgYWRkIGEgdG91Y2ggb2Ygc3R5bGUsIHByb3ZpZGUgY29udmVuaWVuY2UsIGFuZCBiZSB2ZXJzYXRpbGUuIFRoZXkgYXJlIGEgcHJhY3RpY2FsIGFuZCBmdW5jdGlvbmFsIGdpZnQgdGhhdCBjYW4gYmUgdXNlZCBvbiBhIGRhaWx5IGJhc2lzLnsnICd9CiAgICAgICAgICA8L3A+CiAgICAgICAgICA8SW1hZ2VzR3JpZCBjb2w9ezJ9IHJvdz17Mn0+CiAgICAgICAgICAgIDxJbWcgdGV4dD17IkRhdmlkIEpvbmVzIn0gc3JjPXsiaHR0cHM6Ly9tLm1lZGlhLWFtYXpvbi5jb20vaW1hZ2VzL0kvNzFQV085bGh4Q0wuX0FDX1NMMTIwMF8uanBnIn0gaHJlZj17Imh0dHBzOi8vYW16bi50by8zRzNvT21hIn0gLz4KICAgICAgICAgICAgPEltZyB0ZXh0PXsic3RpbG9yZCJ9IHNyYz17Imh0dHBzOi8vbS5tZWRpYS1hbWF6b24uY29tL2ltYWdlcy9JLzgxcWF3TnNteGlMLl9BQ19TTDEyODBfLmpwZyJ9IGhyZWY9eyJodHRwczovL2Ftem4udG8vM1dwSWlxcSJ9IC8+CiAgICAgICAgICAgIDxJbWcgdGV4dD17IldlbmdlciBWZW50dXJlIn0gc3JjPXsiaHR0cHM6Ly9tLm1lZGlhLWFtYXpvbi5jb20vaW1hZ2VzL0kvODFCdGJGRzFxdkwuX0FDX1NMMTUwMF8uanBnIn0gaHJlZj17Imh0dHBzOi8vYW16bi50by8zaHgyNnRjIn0gLz4KICAgICAgICAgICAgPEltZyB0ZXh0PXsiQWxmaGVpbSJ9IHNyYz17Imh0dHBzOi8vbS5tZWRpYS1hbWF6b24uY29tL2ltYWdlcy9JLzgxbmkrUlJhSC1MLl9BQ19TWDY3OV8uanBnIn0gaHJlZj17Imh0dHBzOi8vYW16bi50by8zRkd2YTlzIn0gLz4KICAgICAgICAgIDwvSW1hZ2VzR3JpZD4KICAgICAgPC9Ub3A+CiAgICA8Lz4KICAgIAogICkKfQoKZnVuY3Rpb24gQ29uY2x1c2lvbigpewogIHJldHVybiAoCiAgICA8PgoKICAgICAgICA8aDI+Y29uY2x1c2lvbjwvaDI+CiAgICAgICAgPHA+CgogICAgICAgIEluIGNvbmNsdXNpb24sIHRoZXJlIGFyZSBtYW55IGdpZnQgb3B0aW9ucyBmb3IgbWVuIHRoYXQgY2FuIGJlIGJvdGggcHJhY3RpY2FsIGFuZCBlbmpveWFibGUuIFNvbWUgaWRlYXMgaW5jbHVkZSB3YXRjaGVzLCBjYXJkaG9sZGVycywgY2FyIGFjY2Vzc29yaWVzLCBsYXB0b3AgY2FzZXMsIGFuZCBncm9vbWluZyBwcm9kdWN0cy4gSXQncyBpbXBvcnRhbnQgdG8gY29uc2lkZXIgdGhlIHJlY2lwaWVudCdzIGludGVyZXN0cyBhbmQgcHJlZmVyZW5jZXMgd2hlbiBzZWxlY3RpbmcgYSBnaWZ0LCBhcyB3ZWxsIGFzIHRoZSBvY2Nhc2lvbiBhbmQgdGhlIGJ1ZGdldC4gUGVyc29uYWxpemVkIGdpZnRzLCBzdWNoIGFzIGEgbW9ub2dyYW1tZWQgd2FsbGV0IG9yIGEgZ2lmdCBjZXJ0aWZpY2F0ZSBmb3IgYSBzcGVjaWFsIGV4cGVyaWVuY2UsIGNhbiBhbHNvIGJlIGEgdGhvdWdodGZ1bCBhbmQgbWVhbmluZ2Z1bCBjaG9pY2UuIFVsdGltYXRlbHksIHRoZSBiZXN0IGdpZnQgZm9yIGEgbWFuIHdpbGwgZGVwZW5kIG9uIGhpcyBpbmRpdmlkdWFsIGludGVyZXN0cyBhbmQgbmVlZHMKICAgICAgICA8L3A+CgoKICAgIDwvPgogICkKfQoKCgoKCmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEhvbWUoKSB7CiAgcmV0dXJuICgKICAgIDw+CiAgICAgIDxIZWFkPgogICAgICAgIDx0aXRsZT57dGl0cmVPbmdsZXR9PC90aXRsZT4KICAgICAgICA8bWV0YQogICAgICAgICAgbmFtZT0iZGVzY3JpcHRpb24iCiAgICAgICAgICBjb250ZW50PXtkZXNjcmlwdGlvbn0KICAgICAgICAvPgogICAgICA8L0hlYWQ+CiAgICAgIDxIZWFkZXIgLz4KICAgICAgPG1haW4+CiAgICAgICAgPENvbnRlbnQgLz4KICAgICAgICA8QmxvZyAvPgogICAgICA8L21haW4+CiAgICAgIDxGb290ZXIgLz4KICAgIDwvPgogICkKfQoKCgoKZnVuY3Rpb24gQ29udGVudCgpIHsKICByZXR1cm4gKAogICAgPGRpdiBjbGFzc05hbWU9InJlbGF0aXZlIG92ZXJmbG93LWhpZGRlbiBiZy13aGl0ZSBweS0xNiI+CiAgICAgIDxkaXYgY2xhc3NOYW1lPSJoaWRkZW4gbGc6YWJzb2x1dGUgbGc6aW5zZXQteS0wIGxnOmJsb2NrIGxnOmgtZnVsbCBsZzp3LWZ1bGwgbGc6W292ZXJmbG93LWFuY2hvcjpub25lXSI+CiAgICAgICAgPGRpdiBjbGFzc05hbWU9InJlbGF0aXZlIG14LWF1dG8gaC1mdWxsIG1heC13LXByb3NlIHRleHQtbGciIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgIDxzdmcKICAgICAgICAgICAgY2xhc3NOYW1lPSJhYnNvbHV0ZSB0b3AtMTIgbGVmdC1mdWxsIHRyYW5zbGF0ZS14LTMyIHRyYW5zZm9ybSIKICAgICAgICAgICAgd2lkdGg9ezQwNH0KICAgICAgICAgICAgaGVpZ2h0PXszODR9CiAgICAgICAgICAgIGZpbGw9Im5vbmUiCiAgICAgICAgICAgIHZpZXdCb3g9IjAgMCA0MDQgMzg0IgogICAgICAgICAgPgogICAgICAgICAgICA8ZGVmcz4KICAgICAgICAgICAgICA8cGF0dGVybgogICAgICAgICAgICAgICAgaWQ9Ijc0YjNmZDk5LTBhNmYtNDI3MS1iZWYyLWU4MGVlYWZkZjM1NyIKICAgICAgICAgICAgICAgIHg9ezB9CiAgICAgICAgICAgICAgICB5PXswfQogICAgICAgICAgICAgICAgd2lkdGg9ezIwfQogICAgICAgICAgICAgICAgaGVpZ2h0PXsyMH0KICAgICAgICAgICAgICAgIHBhdHRlcm5Vbml0cz0idXNlclNwYWNlT25Vc2UiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPHJlY3QgeD17MH0geT17MH0gd2lkdGg9ezR9IGhlaWdodD17NH0gY2xhc3NOYW1lPSJ0ZXh0LWdyYXktMjAwIiBmaWxsPSJjdXJyZW50Q29sb3IiIC8+CiAgICAgICAgICAgICAgPC9wYXR0ZXJuPgogICAgICAgICAgICA8L2RlZnM+CiAgICAgICAgICAgIDxyZWN0IHdpZHRoPXs0MDR9IGhlaWdodD17Mzg0fSBmaWxsPSJ1cmwoIzc0YjNmZDk5LTBhNmYtNDI3MS1iZWYyLWU4MGVlYWZkZjM1NykiIC8+CiAgICAgICAgICA8L3N2Zz4KICAgICAgICAgIDxzdmcKICAgICAgICAgICAgY2xhc3NOYW1lPSJhYnNvbHV0ZSB0b3AtMS8yIHJpZ2h0LWZ1bGwgLXRyYW5zbGF0ZS15LTEvMiAtdHJhbnNsYXRlLXgtMzIgdHJhbnNmb3JtIgogICAgICAgICAgICB3aWR0aD17NDA0fQogICAgICAgICAgICBoZWlnaHQ9ezM4NH0KICAgICAgICAgICAgZmlsbD0ibm9uZSIKICAgICAgICAgICAgdmlld0JveD0iMCAwIDQwNCAzODQiCiAgICAgICAgICA+CiAgICAgICAgICAgIDxkZWZzPgogICAgICAgICAgICAgIDxwYXR0ZXJuCiAgICAgICAgICAgICAgICBpZD0iZjIxMGRiZjYtYTU4ZC00ODcxLTk2MWUtMzZkNTAxNmEwZjQ5IgogICAgICAgICAgICAgICAgeD17MH0KICAgICAgICAgICAgICAgIHk9ezB9CiAgICAgICAgICAgICAgICB3aWR0aD17MjB9CiAgICAgICAgICAgICAgICBoZWlnaHQ9ezIwfQogICAgICAgICAgICAgICAgcGF0dGVyblVuaXRzPSJ1c2VyU3BhY2VPblVzZSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8cmVjdCB4PXswfSB5PXswfSB3aWR0aD17NH0gaGVpZ2h0PXs0fSBjbGFzc05hbWU9InRleHQtZ3JheS0yMDAiIGZpbGw9ImN1cnJlbnRDb2xvciIgLz4KICAgICAgICAgICAgICA8L3BhdHRlcm4+CiAgICAgICAgICAgIDwvZGVmcz4KICAgICAgICAgICAgPHJlY3Qgd2lkdGg9ezQwNH0gaGVpZ2h0PXszODR9IGZpbGw9InVybCgjZjIxMGRiZjYtYTU4ZC00ODcxLTk2MWUtMzZkNTAxNmEwZjQ5KSIgLz4KICAgICAgICAgIDwvc3ZnPgogICAgICAgICAgPHN2ZwogICAgICAgICAgICBjbGFzc05hbWU9ImFic29sdXRlIGJvdHRvbS0xMiBsZWZ0LWZ1bGwgdHJhbnNsYXRlLXgtMzIgdHJhbnNmb3JtIgogICAgICAgICAgICB3aWR0aD17NDA0fQogICAgICAgICAgICBoZWlnaHQ9ezM4NH0KICAgICAgICAgICAgZmlsbD0ibm9uZSIKICAgICAgICAgICAgdmlld0JveD0iMCAwIDQwNCAzODQiCiAgICAgICAgICA+CiAgICAgICAgICAgIDxkZWZzPgogICAgICAgICAgICAgIDxwYXR0ZXJuCiAgICAgICAgICAgICAgICBpZD0iZDNlYjA3YWUtNTE4Mi00M2U2LTg1N2QtMzVjNjQzYWY5MDM0IgogICAgICAgICAgICAgICAgeD17MH0KICAgICAgICAgICAgICAgIHk9ezB9CiAgICAgICAgICAgICAgICB3aWR0aD17MjB9CiAgICAgICAgICAgICAgICBoZWlnaHQ9ezIwfQogICAgICAgICAgICAgICAgcGF0dGVyblVuaXRzPSJ1c2VyU3BhY2VPblVzZSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8cmVjdCB4PXswfSB5PXswfSB3aWR0aD17NH0gaGVpZ2h0PXs0fSBjbGFzc05hbWU9InRleHQtZ3JheS0yMDAiIGZpbGw9ImN1cnJlbnRDb2xvciIgLz4KICAgICAgICAgICAgICA8L3BhdHRlcm4+CiAgICAgICAgICAgIDwvZGVmcz4KICAgICAgICAgICAgPHJlY3Qgd2lkdGg9ezQwNH0gaGVpZ2h0PXszODR9IGZpbGw9InVybCgjZDNlYjA3YWUtNTE4Mi00M2U2LTg1N2QtMzVjNjQzYWY5MDM0KSIgLz4KICAgICAgICAgIDwvc3ZnPgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzc05hbWU9InJlbGF0aXZlIHB4LTQgc206cHgtNiBsZzpweC04Ij4KCgogICAgICAgIHsvKiBJbnRyb2R1Y3Rpb24gKi99CiAgICAgICAgPEludHJvZHVjdGlvbiAvPgoKICAgICAgICB7LyogY29udGVudSAqL30KICAgICAgICA8ZGl2IGNsYXNzTmFtZT0icHJvc2UgcHJvc2UtbGcgcHJvc2UtaW5kaWdvIG14LWF1dG8gdGV4dC1ncmF5LTUwMCAiPgoKCiAgICAgICAgICA8Q29udGVudSAvPgoKCiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nbXQtMjAnPgogICAgICAgICAgICA8Q29uY2x1c2lvbiAvPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgKQp9/***s******s***/***s***/***s***/***s***/***s******s***/***s***/***s***/***s******s***